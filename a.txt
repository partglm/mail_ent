/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var entcore_1 = __webpack_require__(1);
	var controller_1 = __webpack_require__(2);
	var printController_1 = __webpack_require__(50);
	var recipientList_1 = __webpack_require__(51);
	var switchSearch_1 = __webpack_require__(52);
	var excludedList_1 = __webpack_require__(53);
	entcore_1.routes.define(function ($routeProvider) {
	    $routeProvider
	        .when("/read-mail/:mailId", {
	        action: "readMail"
	    })
	        .when("/write-mail/:id", {
	        action: "writeMail"
	    })
	        .when("/write-mail/:id/:type", {
	        action: "writeMail"
	    })
	        .when("/write-mail", {
	        action: "writeMail"
	    })
	        .when('/inbox', {
	        action: 'inbox'
	    })
	        .when('/printMail/:mailId', {
	        action: 'viewPrint'
	    })
	        .otherwise({
	        redirectTo: "/inbox"
	    });
	});
	entcore_1.ng.controllers.push(controller_1.conversationController);
	entcore_1.ng.controllers.push(printController_1.printController);
	entcore_1.ng.directives.push(recipientList_1.recipientList);
	entcore_1.ng.directives.push(switchSearch_1.switchSearch);
	entcore_1.ng.directives.push(excludedList_1.excludedList);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = entcore;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.conversationController = void 0;
	var entcore_1 = __webpack_require__(1);
	var model_1 = __webpack_require__(3);
	var angular_1 = __webpack_require__(49);
	exports.conversationController = entcore_1.ng.controller('ConversationController', [
	    '$scope', '$timeout', '$compile', '$sanitize', 'model', 'route', function ($scope, $timeout, $compile, $sanitize, model, route) {
	        var _this = this;
	        $scope.state = {
	            isConvertibleToExercise: false,
	            selectAll: false,
	            filterUnread: false,
	            searching: false,
	            current: undefined,
	            newItem: undefined,
	            draftError: false,
	            dragFolder: undefined,
	            emptyMessage: entcore_1.idiom.translate('folder.empty'),
	            searchFailed: false,
	            draftSaveDate: null,
	            mailLimit: 5000,
	            recipientLimit: entcore_1.ui.breakpoints.checkMaxWidth("fatMobile") ? 5 : 10
	        };
	        $scope.defaultAvatar = "img/illustrations/unknown-avatar.svg?thumbnail=100x100";
	        $scope.conversation = model_1.Conversation.instance;
	        $scope.ccCciShow = false;
	        $scope.attachments = [];
	        $scope.showWarnAboutCommunicationRules = false;
	        $scope.event = {
	            "message": "",
	            "object": "",
	            "buttonResponse": ""
	        };
	        $scope.editEvent = function (eventValueName, value) {
	            $scope.event[eventValueName] = value;
	        };
	        $scope.cleanContent = "";
	        $scope.trackEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mail = new model_1.Mail();
	                        return [4 /*yield*/, mail.trackEvent(event)];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.controlContent = function (content) { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mail = new model_1.Mail();
	                        return [4 /*yield*/, mail.controlContent(content)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        }); };
	        $scope.getkeywords = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mail = new model_1.Mail();
	                        return [4 /*yield*/, mail.keywords()];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        }); };
	        route({
	            readMail: function (params) {
	                return __awaiter(this, void 0, void 0, function () {
	                    return __generator(this, function (_a) {
	                        switch (_a.label) {
	                            case 0:
	                                model_1.Conversation.instance.folders.openFolder('inbox');
	                                entcore_1.template.open('page', 'folders');
	                                $scope.readMail(new model_1.Mail(params.mailId));
	                                return [4 /*yield*/, model_1.Conversation.instance.sync()];
	                            case 1:
	                                _a.sent();
	                                return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                            case 2:
	                                _a.sent();
	                                $scope.constructNewItem();
	                                $scope.$apply();
	                                return [2 /*return*/];
	                        }
	                    });
	                });
	            },
	            writeMail: function (params) {
	                return __awaiter(this, void 0, void 0, function () {
	                    var user, group, i, user;
	                    return __generator(this, function (_a) {
	                        switch (_a.label) {
	                            case 0:
	                                model_1.Conversation.instance.folders.openFolder('inbox');
	                                return [4 /*yield*/, model_1.Conversation.instance.sync()];
	                            case 1:
	                                _a.sent();
	                                entcore_1.template.open('page', 'folders');
	                                entcore_1.template.open('main', 'mail-actions/write-mail');
	                                $scope.constructNewItem();
	                                if (!entcore_1._.isString(params.id)) return [3 /*break*/, 8];
	                                if (!(!params.type || params.type === 'User')) return [3 /*break*/, 3];
	                                user = new model_1.User(params.id);
	                                return [4 /*yield*/, user.findData()];
	                            case 2:
	                                _a.sent();
	                                $scope.addUser(user);
	                                return [3 /*break*/, 7];
	                            case 3:
	                                if (!(params.type === 'Group')) return [3 /*break*/, 5];
	                                group = new model_1.User(params.id);
	                                return [4 /*yield*/, group.findGroupData()];
	                            case 4:
	                                _a.sent();
	                                $scope.addUser(group);
	                                return [3 /*break*/, 7];
	                            case 5:
	                                if (!(params.type === 'Favorite')) return [3 /*break*/, 7];
	                                return [4 /*yield*/, $scope.state.newItem.addFavorite(params.id)];
	                            case 6:
	                                _a.sent();
	                                _a.label = 7;
	                            case 7: return [3 /*break*/, 12];
	                            case 8:
	                                if (!(params.id !== undefined)) return [3 /*break*/, 12];
	                                i = 0;
	                                _a.label = 9;
	                            case 9:
	                                if (!(i < params.id.length)) return [3 /*break*/, 12];
	                                user = new model_1.User(params.id[i]);
	                                return [4 /*yield*/, user.findData()];
	                            case 10:
	                                _a.sent();
	                                $scope.addUser(user);
	                                _a.label = 11;
	                            case 11:
	                                i++;
	                                return [3 /*break*/, 9];
	                            case 12:
	                                $scope.$apply();
	                                return [2 /*return*/];
	                        }
	                    });
	                });
	            },
	            inbox: function () { return __awaiter(_this, void 0, void 0, function () {
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            entcore_1.template.open('page', 'folders');
	                            return [4 /*yield*/, model_1.Conversation.instance.folders.openFolder('inbox')];
	                        case 1:
	                            _a.sent();
	                            return [4 /*yield*/, model_1.Conversation.instance.sync()];
	                        case 2:
	                            _a.sent();
	                            return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                        case 3:
	                            _a.sent();
	                            $scope.constructNewItem();
	                            $scope.$apply();
	                            return [2 /*return*/];
	                    }
	                });
	            }); }
	        });
	        $scope.lang = entcore_1.idiom;
	        $scope.notify = entcore_1.notify;
	        $scope.folders = model_1.Conversation.instance.folders;
	        $scope.userFolders = model_1.Conversation.instance.userFolders;
	        $scope.users = { list: model_1.Conversation.instance.users, search: '', found: [], foundCC: [] };
	        entcore_1.template.open('main', 'folders-templates/inbox');
	        entcore_1.template.open('toaster', 'folders-templates/toaster');
	        $scope.formatFileType = entcore_1.Document.role;
	        $scope.sending = false;
	        /**
	         * WORKSPACE
	         */
	        $scope.copyProps = {
	            i18: {
	                title: "conversation.copy.title",
	                actionTitle: "conversation.copy.action",
	                actionProcessing: "conversation.copy.processing",
	                actionFinished: "conversation.copy.finished",
	                info: "conversation.copy.info"
	            },
	            sources: [],
	            onCancel: function () {
	                $scope.copyLightbox.show = false;
	            },
	            onSubmitSuccess: function (dest, count) {
	                if (count > 1) {
	                    entcore_1.notify.info('conversation.notify.copyToWorkspace.plural');
	                }
	                else {
	                    entcore_1.notify.info('conversation.notify.copyToWorkspace');
	                }
	                $scope.copyLightbox.show = false;
	            }
	        };
	        $scope.copyToWorkspace = function (attachment) {
	            return __awaiter(this, void 0, void 0, function () {
	                var attachments, sources;
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (attachment instanceof Array) {
	                                attachments = attachment;
	                            }
	                            else {
	                                attachments = [attachment];
	                            }
	                            return [4 /*yield*/, ($scope.mail || $scope.state.newItem).toFolderPickerSources(attachments)];
	                        case 1:
	                            sources = _a.sent();
	                            $scope.copyLightbox.show = true;
	                            $scope.copyProps.sources = sources;
	                            $scope.$apply();
	                            return [2 /*return*/];
	                    }
	                });
	            });
	        };
	        //
	        $scope.increaseMailLimit = function () {
	            $scope.state.mailLimit += 5000;
	        };
	        $scope.resetMailLimit = function () {
	            $scope.state.mailLimit = 5000;
	        };
	        $scope.addUser = function (user) {
	            if (!$scope.state.newItem.to) {
	                $scope.state.newItem.to = [];
	            }
	            $scope.state.newItem.to.push(user);
	        };
	        $scope.resetScope = function () {
	            $scope.openInbox();
	        };
	        $scope.resetState = function () {
	            $scope.state.selectAll = false;
	            $scope.state.filterUnread = false;
	            $scope.state.searching = false;
	            $scope.state.draftError = false;
	            $scope.state.emptyMessage = entcore_1.idiom.translate('folder.empty');
	            $scope.state.searchFailed = false;
	            $scope.state.draftSaveDate = null;
	        };
	        $scope.constructNewItem = function () {
	            $scope.state.newItem = new model_1.Mail();
	            $scope.state.newItem.setMailFirstSpace();
	            $scope.state.newItem.setMailSignature($scope.getSignature());
	        };
	        $scope.getSignature = function () {
	            if (model_1.Conversation.instance.preference.useSignature)
	                return model_1.Conversation.instance.preference.signature.replace(new RegExp('\n', 'g'), '<br>');
	            return '';
	        };
	        $scope.openFolder = function (folderName) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        $scope.mail = undefined;
	                        $scope.ccCciShow = false;
	                        if (!folderName) {
	                            if (model_1.Conversation.instance.currentFolder instanceof model_1.UserFolder) {
	                                $scope.openUserFolder(model_1.Conversation.instance.currentFolder, {});
	                                return [2 /*return*/];
	                            }
	                            folderName = model_1.Conversation.instance.currentFolder.folderName;
	                        }
	                        $scope.state.newItem = new model_1.Mail();
	                        $scope.state.newItem.setMailSignature($scope.getSignature());
	                        entcore_1.template.open('main', 'folders-templates/' + folderName);
	                        $scope.resetState();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.openFolder(folderName)];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.countUnread()];
	                    case 2:
	                        _a.sent();
	                        $scope.$apply();
	                        $scope.updateWherami();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.openUserFolderOnDragover = function (folder, obj) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(model_1.Conversation.instance.currentFolder.id != folder.id)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, $scope.openUserFolder(folder, obj)];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.openUserFolder = function (folder, obj) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        $scope.mail = undefined;
	                        $scope.state.newItem = new model_1.Mail();
	                        $scope.state.newItem.setMailSignature($scope.getSignature());
	                        obj.template = 'folder-content';
	                        entcore_1.template.open('main', 'folders-templates/user-folder');
	                        $scope.resetState();
	                        return [4 /*yield*/, folder.open(function () {
	                                $scope.safeApply();
	                            })];
	                    case 1:
	                        _a.sent();
	                        $scope.$apply();
	                        $scope.updateWherami();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.isParentOf = function (folder, targetFolder) {
	            if (!targetFolder || !targetFolder.parentFolder)
	                return false;
	            var ancestor = targetFolder.parentFolder;
	            while (ancestor) {
	                if (folder.id === ancestor.id)
	                    return true;
	                ancestor = ancestor.parentFolder;
	            }
	            return false;
	        };
	        $scope.variableMailAction = function (mail) {
	            var systemFolder = mail.getSystemFolder();
	            if (systemFolder === "DRAFT")
	                return $scope.viewMail(mail);
	            else if (systemFolder === "OUTBOX")
	                return $scope.viewMail(mail);
	            else
	                return $scope.readMail(mail);
	        };
	        $scope.removeFromUserFolder = function (event, mail) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(model_1.Conversation.instance.currentFolder instanceof model_1.UserFolder)) return [3 /*break*/, 4];
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.removeMailsFromFolder()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.inbox.countUnread(true)];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                    case 3:
	                        _a.sent();
	                        $scope.state.selectAll = false;
	                        $scope.$apply();
	                        _a.label = 4;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.nextPage = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(entcore_1.template.containers.main.indexOf('mail-actions') < 0)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.nextPage($scope.state.selectAll)];
	                    case 1:
	                        _a.sent();
	                        $scope.$apply();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.switchSelectAll = function () {
	            if ($scope.state.selectAll) {
	                model_1.Conversation.instance.currentFolder.selectAll();
	            }
	            else {
	                model_1.Conversation.instance.currentFolder.deselectAll();
	            }
	        };
	        $scope.refreshSelectionState = function (mail) {
	            if (!mail.selected)
	                $scope.state.selectAll = false;
	        };
	        function setCurrentMail(mail, doNotSelect) {
	            $scope.state.current = mail;
	            model_1.Conversation.instance.currentFolder.deselectAll();
	            if (!doNotSelect)
	                $scope.state.current.selected = true;
	            $scope.mail = mail;
	            $scope.isSlided = false;
	            $scope.messageHistory = entcore_1.idiom.translate('message.history.show');
	        }
	        $scope.viewMail = function (mail) {
	            return __awaiter(this, void 0, void 0, function () {
	                var e_1;
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            $scope.resetMailLimit();
	                            entcore_1.template.open('main', 'mail-actions/view-mail');
	                            window.scrollTo(0, 0);
	                            setCurrentMail(mail);
	                            _a.label = 1;
	                        case 1:
	                            _a.trys.push([1, 3, , 4]);
	                            return [4 /*yield*/, mail.open()];
	                        case 2:
	                            _a.sent();
	                            $scope.$root.$emit('refreshMails');
	                            $timeout(function () {
	                                var mailReader = document.querySelector('.lct-mail-reader');
	                                if (mailReader && mailReader.textContent.length < 2000) {
	                                    $scope.state.mailLimit = mail.bodyShown.length;
	                                }
	                            }, 0);
	                            return [3 /*break*/, 4];
	                        case 3:
	                            e_1 = _a.sent();
	                            entcore_1.template.open('page', 'errors/e404');
	                            return [3 /*break*/, 4];
	                        case 4: return [2 /*return*/];
	                    }
	                });
	            });
	        };
	        $scope.refresh = function () {
	            return __awaiter(this, void 0, void 0, function () {
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            entcore_1.notify.info('updating');
	                            return [4 /*yield*/, model_1.Conversation.instance.currentFolder.mails.refresh()];
	                        case 1:
	                            _a.sent();
	                            return [4 /*yield*/, model_1.Conversation.instance.folders.inbox.countUnread()];
	                        case 2:
	                            _a.sent();
	                            $scope.$apply();
	                            return [2 /*return*/];
	                    }
	                });
	            });
	        };
	        $scope.readMail = function (mail) { return __awaiter(_this, void 0, void 0, function () {
	            var e_2;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        $scope.resetMailLimit();
	                        entcore_1.template.open('main', 'mail-actions/read-mail');
	                        window.scrollTo(0, 0);
	                        setCurrentMail(mail, true);
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, mail.open()];
	                    case 2:
	                        _a.sent();
	                        $scope.$root.$emit('refreshMails');
	                        $timeout(function () {
	                            var mailReader = document.querySelector('.lct-mail-reader');
	                            if (mailReader && mailReader.textContent.length < 2000) {
	                                $scope.state.mailLimit = mail.bodyShown.length;
	                            }
	                        }, 0);
	                        return [3 /*break*/, 4];
	                    case 3:
	                        e_2 = _a.sent();
	                        entcore_1.template.open('page', 'errors/e404');
	                        return [3 /*break*/, 4];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.search = function (text) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                if (text.trim().length > 2) {
	                    $scope.state.searchFailed = false;
	                    $scope.state.searching = true;
	                    $scope.state.emptyMessage = entcore_1.idiom.translate('no.result');
	                    setTimeout(function () {
	                        return __awaiter(this, void 0, void 0, function () {
	                            return __generator(this, function (_a) {
	                                switch (_a.label) {
	                                    case 0: return [4 /*yield*/, model_1.Conversation.instance.currentFolder.search(text)];
	                                    case 1:
	                                        _a.sent();
	                                        $scope.$apply();
	                                        return [2 /*return*/];
	                                }
	                            });
	                        });
	                    }, 1);
	                }
	                else {
	                    $scope.state.searchFailed = true;
	                }
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.cancelSearch = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                $scope.state.searching = false;
	                $scope.state.searchFailed = false;
	                setTimeout(function () {
	                    return __awaiter(this, void 0, void 0, function () {
	                        return __generator(this, function (_a) {
	                            switch (_a.label) {
	                                case 0: return [4 /*yield*/, model_1.Conversation.instance.currentFolder.search("")];
	                                case 1:
	                                    _a.sent();
	                                    $scope.$apply();
	                                    return [2 /*return*/];
	                            }
	                        });
	                    });
	                }, 1);
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.filterUnread = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                setTimeout(function () {
	                    return __awaiter(this, void 0, void 0, function () {
	                        return __generator(this, function (_a) {
	                            switch (_a.label) {
	                                case 0: return [4 /*yield*/, model_1.Conversation.instance.currentFolder.filterUnread($scope.state.filterUnread)];
	                                case 1:
	                                    _a.sent();
	                                    $scope.$apply();
	                                    return [2 /*return*/];
	                            }
	                        });
	                    });
	                }, 1);
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.isLoading = function () {
	            return model_1.Conversation.instance.currentFolder.mails.loading;
	        };
	        $scope.nextMail = function (trash) { return __awaiter(_this, void 0, void 0, function () {
	            var mails, idx, nextMail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mails = model_1.Conversation.instance.currentFolder.mails.all;
	                        idx = mails.findIndex(function (mail) { return mail.id === $scope.state.current.id; });
	                        nextMail = null;
	                        if (idx > -1 && idx < mails.length - 1)
	                            nextMail = mails[idx + 1];
	                        if (!nextMail) return [3 /*break*/, 3];
	                        if (!trash) return [3 /*break*/, 2];
	                        setCurrentMail(nextMail, true);
	                        return [4 /*yield*/, nextMail.open()];
	                    case 1:
	                        _a.sent();
	                        $scope.$apply();
	                        return [3 /*break*/, 3];
	                    case 2:
	                        $scope.variableMailAction(nextMail);
	                        _a.label = 3;
	                    case 3:
	                        if (!(idx === mails.length - 2 && nextMail.count > mails.length)) return [3 /*break*/, 5];
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.nextPage($scope.state.selectAll)];
	                    case 4:
	                        _a.sent();
	                        $scope.$apply();
	                        _a.label = 5;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.previousMail = function (trash) { return __awaiter(_this, void 0, void 0, function () {
	            var mails, idx, previousMail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mails = model_1.Conversation.instance.currentFolder.mails.all;
	                        idx = mails.findIndex(function (mail) { return mail.id === $scope.state.current.id; });
	                        previousMail = null;
	                        if (idx > -1 && idx > 0)
	                            previousMail = mails[idx - 1];
	                        if (!previousMail) return [3 /*break*/, 3];
	                        if (!trash) return [3 /*break*/, 2];
	                        setCurrentMail(previousMail, true);
	                        return [4 /*yield*/, previousMail.open()];
	                    case 1:
	                        _a.sent();
	                        $scope.$apply();
	                        return [3 /*break*/, 3];
	                    case 2:
	                        $scope.variableMailAction(previousMail);
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.transfer = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        entcore_1.template.open('main', 'mail-actions/write-mail');
	                        mail = $scope.state.newItem;
	                        mail.parentConversation = $scope.mail;
	                        return [4 /*yield*/, mail.setMailContent($scope.mail, 'transfer', $compile, $sanitize, $scope, $scope.getSignature())];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.transfer(mail.parentConversation, $scope.state.newItem)];
	                    case 2:
	                        _a.sent();
	                        $scope.ccCciShow = false;
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.reply = function (outbox) { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        entcore_1.template.open('main', 'mail-actions/write-mail');
	                        mail = $scope.state.newItem;
	                        mail.parentConversation = $scope.mail;
	                        return [4 /*yield*/, mail.setMailContent($scope.mail, 'reply', $compile, $sanitize, $scope, $scope.getSignature())];
	                    case 1:
	                        _a.sent();
	                        if (outbox)
	                            mail.to = $scope.mail.to;
	                        else
	                            $scope.addUser($scope.mail.sender());
	                        $scope.ccCciShow = false;
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.replyAll = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        entcore_1.template.open('main', 'mail-actions/write-mail');
	                        mail = $scope.state.newItem;
	                        mail.parentConversation = $scope.mail;
	                        return [4 /*yield*/, mail.setMailContent($scope.mail, 'reply', $compile, $sanitize, $scope, $scope.getSignature(), true)];
	                    case 1:
	                        _a.sent();
	                        if ($scope.mail.sender().id !== model.me.userId)
	                            mail.to = entcore_1._.filter($scope.state.newItem.to, function (user) { return user.id !== model.me.userId; });
	                        if (!entcore_1._.findWhere($scope.state.newItem.to, { id: $scope.mail.sender().id })) {
	                            $scope.addUser($scope.mail.sender());
	                        }
	                        $scope.ccCciShow = (mail.cc.length || mail.cci.length);
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.editDraft = function (draft) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        entcore_1.template.open('main', 'mail-actions/write-mail');
	                        window.scrollTo(0, 0);
	                        $scope.state.newItem = draft;
	                        return [4 /*yield*/, draft.open()];
	                    case 1:
	                        _a.sent();
	                        $scope.ccCciShow = (draft.cc.length || draft.cci.length);
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.quickSaveDraft = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                $scope.saveDraft($scope.state.newItem);
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.hourIsit = function () { return $scope.state.draftSaveDate.format('HH'); };
	        $scope.minIsit = function () { return $scope.state.draftSaveDate.format('mm'); };
	        $scope.secIsit = function () { return $scope.state.draftSaveDate.format(':ss'); };
	        $scope.saveDraft = function (item) { return __awaiter(_this, void 0, void 0, function () {
	            var e_3;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.saveDraft(item)];
	                    case 1:
	                        _a.sent();
	                        $scope.state.draftError = false;
	                        $scope.state.draftSaveDate = (0, entcore_1.moment)();
	                        return [3 /*break*/, 3];
	                    case 2:
	                        e_3 = _a.sent();
	                        $scope.state.draftError = true;
	                        console.error(e_3);
	                        return [3 /*break*/, 3];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.saveDraftAuto = function () { return __awaiter(_this, void 0, void 0, function () {
	            var temp;
	            return __generator(this, function (_a) {
	                if (!$scope.draftSavingFlag) {
	                    $scope.draftSavingFlag = true;
	                    temp = $scope.state.newItem;
	                    setTimeout(function () {
	                        return __awaiter(this, void 0, void 0, function () {
	                            return __generator(this, function (_a) {
	                                if (!$scope.sending && temp.state != "SENT") {
	                                    $scope.saveDraft(temp);
	                                }
	                                $scope.draftSavingFlag = false;
	                                return [2 /*return*/];
	                            });
	                        });
	                    }, 30000);
	                }
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.checkWarnAboutCommunicationRules = function () {
	            // Check if the recipients are groups of -or many different- relatives.
	            var count = 0;
	            var to = $scope.state.newItem.to || [];
	            var cc = $scope.state.newItem.cc || [];
	            to.concat(cc).map(function (user) {
	                if (user.profile == "Relative" || user.profile == "Manual") {
	                    count += user.isGroup ? 2 : 1;
	                }
	            });
	            // If 2+ relatives are recipients, then this is a group message which may bypass communication rules.
	            // => Relatives will be able to reply to the whole group, so let's display a warning !
	            if (count > 1) {
	                $scope.showWarnAboutCommunicationRules = true;
	            }
	        };
	        $scope.agreedCommunicationRules = function (visible) {
	            if (!visible) {
	                $scope.showWarnAboutCommunicationRules = false;
	                // Also, don't display this warning not anymore: but this is managed by the infotip class directly.
	            }
	        };
	        $scope.refreshSignature = function (use) { return __awaiter(_this, void 0, void 0, function () {
	            var body, signature;
	            return __generator(this, function (_a) {
	                model_1.Conversation.instance.putPreference();
	                body = (0, entcore_1.$)($scope.state.newItem.body);
	                signature = $scope.getSignature();
	                if (body.filter('.new-signature').length > 0) {
	                    body.filter('.new-signature').text('');
	                    if (use) {
	                        body.filter('.new-signature').append(signature);
	                    }
	                    $scope.state.newItem.body = entcore_1._.map(body, function (el) { return el.outerHTML; }).join('');
	                }
	                else {
	                    $scope.state.newItem.setMailSignature(signature);
	                }
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.result = {};
	        $scope.sendMail = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mail, _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        $scope.editEvent("message", $scope.cleanContent);
	                        $scope.editEvent("object", $scope.state.newItem.subject == "" || $scope.state.newItem.subject == undefined ? "Sans objet" : $scope.state.newItem.subject);
	                        $scope.sending = true; //Blocks submit button while message hasn't been send
	                        mail = $scope.state.newItem;
	                        _a = $scope;
	                        return [4 /*yield*/, mail.send()];
	                    case 1:
	                        _a.result = _b.sent();
	                        $scope.state.newItem = new model_1.Mail();
	                        $scope.state.newItem.setMailSignature($scope.getSignature());
	                        return [4 /*yield*/, $scope.openFolder(model_1.Conversation.instance.folders.inbox.folderName)];
	                    case 2:
	                        _b.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                    case 3:
	                        _b.sent();
	                        $scope.$root.$emit('refreshMails');
	                        $scope.sending = false;
	                        if ($scope.state.isConvertibleToExercise && model.me.hasWorkflow('org.entcore.conversation.controllers.ConversationController|stimulationExercise')) {
	                            $scope.trackEvent($scope.event);
	                        }
	                        $scope.event = {};
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.checkExerciseBeforeSendMail = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mail, hasExerciseWorkflow, configResponse, isExerciseFeatureEnabled, isConvertibleToExercise, mailSent_1, timeoutPromise, contentAnalysisPromise, error_1;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mail = $scope.state.newItem;
	                        hasExerciseWorkflow = model.me.hasWorkflow('org.entcore.conversation.controllers.ConversationController|stimulationExercise');
	                        $scope.editEvent("buttonResponse", "Pas de clique");
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 5, , 6]);
	                        return [4 /*yield*/, mail.getConfPublic()];
	                    case 2:
	                        configResponse = _a.sent();
	                        isExerciseFeatureEnabled = configResponse.data['mail-to-exercizer'];
	                        if (!isExerciseFeatureEnabled || !hasExerciseWorkflow) {
	                            return [2 /*return*/, $scope.sendMail()];
	                        }
	                        return [4 /*yield*/, $scope.checkExercise()];
	                    case 3:
	                        isConvertibleToExercise = _a.sent();
	                        if (!isConvertibleToExercise) {
	                            $scope.editEvent("model", "NO CALLED");
	                            return [2 /*return*/, $scope.sendMail()];
	                        }
	                        mailSent_1 = false;
	                        timeoutPromise = new Promise(function (resolve) {
	                            setTimeout(function () {
	                                if (!mailSent_1) {
	                                    mailSent_1 = true;
	                                    $scope.sendMail();
	                                }
	                                resolve();
	                            }, 3000);
	                        });
	                        contentAnalysisPromise = function () { return __awaiter(_this, void 0, void 0, function () {
	                            var contentResponse, error_2;
	                            return __generator(this, function (_a) {
	                                switch (_a.label) {
	                                    case 0:
	                                        _a.trys.push([0, 2, , 3]);
	                                        return [4 /*yield*/, $scope.controlContent({
	                                                message: $scope.cleanContent,
	                                                subject: $scope.state.newItem.subject
	                                            })];
	                                    case 1:
	                                        contentResponse = _a.sent();
	                                        $scope.editEvent("model", contentResponse.data['distribution']);
	                                        if (!mailSent_1) {
	                                            if (contentResponse.data['distribution'] === "YES") {
	                                                mailSent_1 = true;
	                                                $scope.openNewExerciseCreator();
	                                            }
	                                            else {
	                                                mailSent_1 = true;
	                                                $scope.sendMail();
	                                            }
	                                        }
	                                        return [3 /*break*/, 3];
	                                    case 2:
	                                        error_2 = _a.sent();
	                                        if (!mailSent_1) {
	                                            mailSent_1 = true;
	                                            $scope.sendMail();
	                                        }
	                                        return [3 /*break*/, 3];
	                                    case 3: return [2 /*return*/];
	                                }
	                            });
	                        }); };
	                        return [4 /*yield*/, Promise.race([timeoutPromise, contentAnalysisPromise()])];
	                    case 4:
	                        _a.sent();
	                        return [3 /*break*/, 6];
	                    case 5:
	                        error_1 = _a.sent();
	                        $scope.sendMail();
	                        return [3 /*break*/, 6];
	                    case 6: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.openNewExerciseCreator = function () {
	            $scope.lightbox.show = true;
	            entcore_1.template.open('lightbox', 'create-exercise');
	        };
	        /**
	         * Determines if a mail can be converted to an exercise based on content analysis.
	         * Checks three conditions:
	         * 1. Contains specific educational keywords
	         * 2. Has multiple recipients (students/parents)
	         * 3. Includes file attachments
	         * @returns boolean - True if the mail can be converted to an exercise
	         */
	        $scope.checkExercise = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mailBody, contentElement, signatureElements, educationalKeywords, keywords, keywordGroupsFound, object, recipients, countGroups;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mailBody = $scope.state.newItem.body;
	                        contentElement = document.createElement('div');
	                        contentElement.innerHTML = mailBody;
	                        signatureElements = contentElement.querySelectorAll('.signature.new-signature.ng-scope');
	                        if (signatureElements && signatureElements.length > 0) {
	                            signatureElements.forEach(function (signatureElement) {
	                                var currentNode = signatureElement.nextSibling;
	                                while (currentNode) {
	                                    var nodeToRemove = currentNode;
	                                    currentNode = currentNode.nextSibling;
	                                    nodeToRemove.parentNode.removeChild(nodeToRemove);
	                                }
	                                signatureElement.parentNode.removeChild(signatureElement);
	                            });
	                        }
	                        $scope.cleanContent = (contentElement.textContent || contentElement.innerText || '').toLowerCase();
	                        educationalKeywords = [
	                            ["devoir", "devoirs"],
	                            ["rendre", "remettre"],
	                        ];
	                        return [4 /*yield*/, $scope.getkeywords()];
	                    case 1:
	                        keywords = _a.sent();
	                        if (keywords != null) {
	                            educationalKeywords = keywords;
	                        }
	                        keywordGroupsFound = educationalKeywords.filter(function (group) {
	                            return group.some(function (keyword) { return $scope.cleanContent.includes(keyword); });
	                        }).length;
	                        object = $scope.state.newItem.subject == "" || $scope.state.newItem.subject == undefined ? "Sans objet" : $scope.state.newItem.subject;
	                        keywordGroupsFound += educationalKeywords.filter(function (group) {
	                            return group.some(function (keyword) { return object.toLowerCase().includes(keyword); });
	                        }).length;
	                        recipients = __spreadArray([], ($scope.state.newItem.to || []), true);
	                        countGroups = 0;
	                        (0, angular_1.forEach)(recipients, function (cc) {
	                            if (cc.isGroup) {
	                                countGroups += 1;
	                            }
	                        });
	                        // 4. Determine if mail is convertible to exercise
	                        $scope.state.isConvertibleToExercise = (keywordGroupsFound >= 2 &&
	                            countGroups >= 1);
	                        console.log("word groups found: ", keywordGroupsFound);
	                        console.log("Groups found: ", countGroups);
	                        return [2 /*return*/, $scope.state.isConvertibleToExercise];
	                }
	            });
	        }); };
	        $scope.redirectToUrlExercise = function () {
	            return __awaiter(this, void 0, void 0, function () {
	                var files, mail, attachmentsArray, attachments, error_3, messageBody, eventData, encodedMessageBody, encodedEvent;
	                var _this = this;
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            $scope.editEvent("object", $scope.state.newItem.subject == "" || $scope.state.newItem.subject == undefined ? "Sans objet" : $scope.state.newItem.subject);
	                            $scope.editEvent("buttonResponse", "Distribuer avec Exercices");
	                            $scope.editEvent("message", $scope.state.newItem.body);
	                            $scope.editEvent("model", "YES");
	                            files = [];
	                            mail = new model_1.Mail();
	                            attachmentsArray = [];
	                            if ($scope.state.newItem.attachments) {
	                                attachmentsArray = Array.from($scope.state.newItem.attachments);
	                            }
	                            if (!(attachmentsArray.length > 0)) return [3 /*break*/, 4];
	                            attachments = attachmentsArray;
	                            _a.label = 1;
	                        case 1:
	                            _a.trys.push([1, 3, , 4]);
	                            return [4 /*yield*/, Promise.all(attachments.map(function (attachment) { return __awaiter(_this, void 0, void 0, function () {
	                                    var id;
	                                    return __generator(this, function (_a) {
	                                        switch (_a.label) {
	                                            case 0: return [4 /*yield*/, mail.importDocumentInWorkspace(attachment['file'], "[ORPHAN_FILE]-".concat(attachment['filename']))];
	                                            case 1:
	                                                id = _a.sent();
	                                                files.push({ id: id, name: attachment["filename"] });
	                                                return [2 /*return*/];
	                                        }
	                                    });
	                                }); }))];
	                        case 2:
	                            _a.sent();
	                            return [3 /*break*/, 4];
	                        case 3:
	                            error_3 = _a.sent();
	                            console.error("Error processing files or encoding:", error_3);
	                            entcore_1.notify.error("converter.error.invalid.characters");
	                            return [3 /*break*/, 4];
	                        case 4:
	                            try {
	                                if (files.length == 0)
	                                    files.push({ file: "empty" });
	                                messageBody = encodeURIComponent(JSON.stringify(files));
	                                eventData = encodeURIComponent(JSON.stringify($scope.event));
	                                $scope.editEvent("message", $scope.cleanContent);
	                                $scope.trackEvent($scope.event);
	                                encodedMessageBody = btoa(messageBody);
	                                encodedEvent = btoa(eventData);
	                                window.location.href = "/exercizer#/subject/create/simple?messagebody=".concat(encodedMessageBody, "&event=").concat(encodedEvent);
	                            }
	                            catch (error) {
	                                console.error("Error encoding data:", error);
	                                entcore_1.notify.error("exercizer.error.encoding");
	                                return [2 /*return*/];
	                            }
	                            return [2 /*return*/];
	                    }
	                });
	            });
	        };
	        $scope.handleExerciseModalResponse = function (buttonResponse) {
	            $scope.editEvent("buttonResponse", buttonResponse);
	            $scope.lightbox.show = false;
	            $scope.sendMail();
	        };
	        $scope.closeExerciseModal = function () {
	            $scope.handleExerciseModalResponse("Pas maintenant");
	        };
	        $scope.falsePositiveGeneration = function () {
	            $scope.handleExerciseModalResponse("Ce n'est pas un devoir");
	        };
	        $scope.restore = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, model_1.Conversation.instance.folders.trash.restore()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.refreshFolders()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.mails.refresh()];
	                    case 3:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.inbox.countUnread(true)];
	                    case 4:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.userFolders.countUnread()];
	                    case 5:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                    case 6:
	                        _a.sent();
	                        $scope.state.selectAll = false;
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.removeSelection = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, model_1.Conversation.instance.currentFolder.removeSelection()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.countUnread(true)];
	                    case 2:
	                        _a.sent();
	                        if (!(model_1.Conversation.instance.currentFolder.getName() == 'DRAFT')) return [3 /*break*/, 4];
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        $scope.state.selectAll = false;
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.toggleUnreadSelection = function (unread) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        model_1.Folder.purgeCache();
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.toggleUnreadSelection(unread)];
	                    case 1:
	                        _a.sent();
	                        $scope.$root.$emit('refreshMails');
	                        $scope.state.selectAll = false;
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.canMarkUnread = function () {
	            return model_1.Conversation.instance.currentFolder.mails.selection.selected.find(function (e) { return e.getSystemFolder() !== 'INBOX'; }) == undefined &&
	                model_1.Conversation.instance.currentFolder.mails.selection.selected.find(function (e) { return !e.unread; });
	        };
	        $scope.canMarkRead = function () {
	            return model_1.Conversation.instance.currentFolder.mails.selection.selected.find(function (e) { return e.getSystemFolder() !== 'INBOX'; }) == undefined &&
	                model_1.Conversation.instance.currentFolder.mails.selection.selected.find(function (e) { return e.unread; });
	        };
	        // Retrieve all recipients of a mail
	        $scope.allRecipients = function (mail) {
	            var recipients = new Map();
	            // Adding direct recipients to recipients map
	            recipients.set('to', mail.to.slice(0));
	            mail.toName && mail.toName.forEach(function (deletedRecipient) {
	                recipients.get('to').push({
	                    deleted: true,
	                    displayName: deletedRecipient
	                });
	            });
	            // Adding cc recipients to recipients map
	            recipients.set('cc', mail.cc.slice(0));
	            mail.ccName && mail.ccName.forEach(function (deletedRecipient) {
	                recipients.get('cc').push({
	                    deleted: true,
	                    displayName: deletedRecipient
	                });
	            });
	            // Adding cci recipients to recipients map
	            recipients.set('cci', mail.cci.slice(0));
	            mail.cciName && mail.cciName.forEach(function (deletedRecipient) {
	                recipients.get('cci').push({
	                    deleted: true,
	                    displayName: deletedRecipient
	                });
	            });
	            return recipients;
	        };
	        $scope.filterUsers = function (mail) {
	            return function (user) {
	                if (user.deleted) {
	                    return true;
	                }
	                var mapped = mail.map(user);
	                return typeof mapped !== 'undefined' && typeof mapped.displayName !== 'undefined' && mapped.displayName.length > 0;
	            };
	        };
	        $scope.updateFoundUsers = function (search, model, founds, restriction) { return __awaiter(_this, void 0, void 0, function () {
	            var include, exclude, users;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        include = [];
	                        exclude = model || [];
	                        if ($scope.mail) {
	                            include = entcore_1._.map($scope.mail.displayNames, function (item) {
	                                return new model_1.User(item[0], item[1]);
	                            });
	                        }
	                        return [4 /*yield*/, model_1.Conversation.instance.users.findUser(search, include, exclude, restriction)];
	                    case 1:
	                        users = _a.sent();
	                        Object.assign(founds, users, { length: users.length });
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.template = entcore_1.template;
	        $scope.lightbox = {};
	        $scope.copyLightbox = {};
	        $scope.rootFolderTemplate = { template: 'folder-root-template' };
	        $scope.refreshFolders = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, $scope.userFolders.sync()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.refreshFolder()];
	                    case 2:
	                        _a.sent();
	                        $scope.rootFolderTemplate.template = "";
	                        $timeout(function () {
	                            $scope.$apply();
	                            $scope.rootFolderTemplate.template = 'folder-root-template';
	                        }, 100);
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.refreshFolder = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, model_1.Conversation.instance.currentFolder.sync()];
	                    case 1:
	                        _a.sent();
	                        $scope.state.selectAll = false;
	                        if (model_1.Conversation.instance.currentFolder instanceof model_1.UserFolder) {
	                            $scope.openUserFolder(model_1.Conversation.instance.currentFolder, {});
	                        }
	                        else
	                            $scope.updateWherami();
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.currentFolderDepth = function () {
	            if (!($scope.currentFolder instanceof model_1.UserFolder))
	                return 0;
	            return $scope.currentFolder.depth();
	        };
	        $scope.moveSelection = function () {
	            $scope.destination = {};
	            $scope.lightbox.show = true;
	            entcore_1.template.open('lightbox', 'move-mail');
	        };
	        $scope.safeApply = function (fn) {
	            var phase = this.$root.$$phase;
	            if (phase == '$apply' || phase == '$digest') {
	                if (fn && (typeof (fn) === 'function')) {
	                    fn();
	                }
	            }
	            else {
	                this.$apply(fn);
	            }
	        };
	        $scope.moveToFolderClick = function (folder, obj) { return __awaiter(_this, void 0, void 0, function () {
	            var future;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        obj.template = '';
	                        future = folder.syncUserFolders(true);
	                        $scope.safeApply();
	                        return [4 /*yield*/, future];
	                    case 1:
	                        _a.sent();
	                        if (folder.userFolders.all.length > 0) {
	                            $timeout(function () {
	                                obj.template = 'move-folders-content';
	                            }, 10);
	                            return [2 /*return*/];
	                        }
	                        //await folder.userFolders.sync();
	                        $timeout(function () {
	                            obj.template = 'move-folders-content';
	                        }, 10);
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.moveMessages = function (folderTarget) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        $scope.lightbox.show = false;
	                        entcore_1.template.close('lightbox');
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.mails.moveSelection(folderTarget)];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.countDraft(model_1.Conversation.instance.currentFolder, folderTarget)];
	                    case 2:
	                        if (!!(_a.sent())) return [3 /*break*/, 5];
	                        return [4 /*yield*/, model_1.Conversation.instance.currentFolder.countUnread(true)];
	                    case 3:
	                        _a.sent();
	                        return [4 /*yield*/, folderTarget.countUnread()];
	                    case 4:
	                        _a.sent();
	                        _a.label = 5;
	                    case 5: return [4 /*yield*/, $scope.refreshFolder()];
	                    case 6:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.openNewFolderView = function () {
	            $scope.newFolder = new model_1.UserFolder();
	            if (model_1.Conversation.instance.currentFolder instanceof model_1.UserFolder) {
	                $scope.newFolder.parentFolderId = model_1.Conversation.instance.currentFolder.id;
	            }
	            $scope.lightbox.show = true;
	            entcore_1.template.open('lightbox', 'create-folder');
	        };
	        $scope.createFolder = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, $scope.newFolder.create()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.refreshFolders()];
	                    case 2:
	                        _a.sent();
	                        $scope.lightbox.show = false;
	                        entcore_1.template.close('lightbox');
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.openRenameFolderView = function (folder, $event) {
	            $event.stopPropagation();
	            $scope.targetFolder = new model_1.UserFolder();
	            $scope.targetFolder.name = folder.name;
	            $scope.targetFolder.id = folder.id;
	            $scope.lightbox.show = true;
	            entcore_1.template.open('lightbox', 'update-folder');
	        };
	        $scope.updateFolder = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, $scope.targetFolder.update()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.refreshFolders()];
	                    case 2:
	                        _a.sent();
	                        $scope.lightbox.show = false;
	                        entcore_1.template.close('lightbox');
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.isOpenedFolderRelativeTo = function (relativeFolder, folder) {
	            return (relativeFolder && relativeFolder.id === folder.id) || $scope.isParentOf(folder, relativeFolder);
	        };
	        $scope.isOpenedFolder = function (folder) {
	            return $scope.isOpenedFolderRelativeTo($scope.conversation.currentFolder, folder);
	        };
	        $scope.isClosedFolder = function (folder) {
	            return !$scope.isOpenedFolder(folder);
	        };
	        $scope.trashFolder = function (folder) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, folder.trash()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.refreshFolders()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.trash.sync()];
	                    case 3:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.openFolder('trash')];
	                    case 4:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.restoreFolder = function (folder) {
	            folder.restore().done(function () {
	                $scope.refreshFolders();
	            });
	        };
	        $scope.deleteFolder = function (folder) {
	            folder.delete().done(function () {
	                $scope.refreshFolders();
	            });
	        };
	        var letterIcon = document.createElement("img");
	        letterIcon.src = entcore_1.skin.theme + "../../img/icons/message-icon.png";
	        $scope.drag = function (item, $originalEvent) {
	            var selected = [];
	            $scope.state.dragFolder = model_1.Conversation.instance.currentFolder;
	            if (model_1.Conversation.instance.currentFolder.mails.selection.selected.indexOf(item) > -1)
	                selected = model_1.Conversation.instance.currentFolder.mails.selection.selected;
	            else
	                selected.push(item);
	            $originalEvent.dataTransfer.setDragImage(letterIcon, 0, 0);
	            try {
	                $originalEvent.dataTransfer.setData('application/json', JSON.stringify(selected));
	            }
	            catch (e) {
	                $originalEvent.dataTransfer.setData('Text', JSON.stringify(selected));
	            }
	        };
	        $scope.dropCondition = function (targetItem) {
	            return function (event) {
	                var dataField = event.dataTransfer.types.indexOf && event.dataTransfer.types.indexOf("application/json") > -1 ? "application/json" : //Chrome & Safari
	                    event.dataTransfer.types.contains && event.dataTransfer.types.contains("application/json") ? "application/json" : //Firefox
	                        event.dataTransfer.types.contains && event.dataTransfer.types.contains("Text") ? "Text" : //IE
	                            undefined;
	                if (targetItem.foldersName && targetItem.foldersName !== 'trash')
	                    return undefined;
	                return dataField;
	            };
	        };
	        $scope.dropTo = function (targetItem, $originalEvent) {
	            var dataField = $scope.dropCondition(targetItem)($originalEvent);
	            var originalItems = JSON.parse($originalEvent.dataTransfer.getData(dataField));
	            if (targetItem.folderName === 'trash')
	                $scope.dropTrash(originalItems);
	            else
	                $scope.dropMove(originalItems, targetItem);
	        };
	        $scope.removeMail = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, $scope.mail.remove()];
	                    case 1:
	                        _a.sent();
	                        $scope.openFolder();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.dropMove = function (mails, folder) { return __awaiter(_this, void 0, void 0, function () {
	            var mailObj, _i, mails_1, mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _i = 0, mails_1 = mails;
	                        _a.label = 1;
	                    case 1:
	                        if (!(_i < mails_1.length)) return [3 /*break*/, 4];
	                        mail = mails_1[_i];
	                        mailObj = new model_1.Mail(mail.id);
	                        return [4 /*yield*/, mailObj.move(folder)];
	                    case 2:
	                        _a.sent();
	                        $scope.$apply();
	                        _a.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [4 /*yield*/, $scope.countDraft($scope.state.dragFolder, folder)];
	                    case 5:
	                        if (!!(_a.sent())) return [3 /*break*/, 8];
	                        return [4 /*yield*/, folder.countUnread()];
	                    case 6:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.state.dragFolder.countUnread(true)];
	                    case 7:
	                        _a.sent();
	                        _a.label = 8;
	                    case 8:
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.dropTrash = function (mails) { return __awaiter(_this, void 0, void 0, function () {
	            var mailObj, _i, mails_2, mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _i = 0, mails_2 = mails;
	                        _a.label = 1;
	                    case 1:
	                        if (!(_i < mails_2.length)) return [3 /*break*/, 4];
	                        mail = mails_2[_i];
	                        mailObj = new model_1.Mail(mail.id);
	                        return [4 /*yield*/, mailObj.trash()];
	                    case 2:
	                        _a.sent();
	                        $scope.$apply();
	                        _a.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [4 /*yield*/, $scope.countDraft($scope.state.dragFolder, $scope.state.dragFolder)];
	                    case 5:
	                        if (!!(_a.sent())) return [3 /*break*/, 7];
	                        return [4 /*yield*/, $scope.state.dragFolder.countUnread(true)];
	                    case 6:
	                        _a.sent();
	                        _a.label = 7;
	                    case 7:
	                        $scope.$apply();
	                        return [2 /*return*/];
	                }
	            });
	        }); };
	        //Given a data size in bytes, returns a more "user friendly" representation.
	        $scope.getAppropriateDataUnit = model_1.quota.appropriateDataUnit;
	        $scope.formatSize = function (size) {
	            var formattedData = $scope.getAppropriateDataUnit(size);
	            return (Math.round(formattedData.nb * 10) / 10) + " " + formattedData.order;
	        };
	        $scope.postAttachments = function () { return __awaiter(_this, void 0, void 0, function () {
	            var mail;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        mail = $scope.state.newItem;
	                        if (!!mail.id) return [3 /*break*/, 3];
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.saveDraft(mail)];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, mail.postAttachments($scope)];
	                    case 2:
	                        _a.sent();
	                        return [3 /*break*/, 5];
	                    case 3: return [4 /*yield*/, mail.postAttachments($scope)];
	                    case 4:
	                        _a.sent();
	                        _a.label = 5;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.deleteAttachment = function (event, attachment, mail) {
	            mail.deleteAttachment(attachment);
	        };
	        $scope.quota = model_1.quota;
	        $scope.countDraft = function (folderSource, folderTarget) { return __awaiter(_this, void 0, void 0, function () {
	            var draft;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        draft = (folderSource.getName() === 'DRAFT' || folderTarget.getName() === 'DRAFT');
	                        if (!draft) return [3 /*break*/, 2];
	                        model_1.Folder.purgeCache();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.draft.countTotal()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/, draft];
	                }
	            });
	        }); };
	        $scope.emptyTrash = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                $scope.lightbox.show = true;
	                entcore_1.template.open('lightbox', 'empty-trash');
	                return [2 /*return*/];
	            });
	        }); };
	        $scope.removeTrashMessages = function () { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, , 4, 5]);
	                        $scope.lightbox.show = false;
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.trash.removeAll()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, $scope.refreshFolders()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, model_1.Conversation.instance.folders.trash.countUnread(true)];
	                    case 3:
	                        _a.sent();
	                        return [3 /*break*/, 5];
	                    case 4:
	                        $scope.$apply();
	                        return [7 /*endfinally*/];
	                    case 5: return [2 /*return*/];
	                }
	            });
	        }); };
	        $scope.updateWherami = function () {
	            $timeout(function () {
	                (0, entcore_1.$)('body').trigger('whereami.update');
	            }, 100);
	        };
	        $scope.isLocalAdmin = function () {
	            return model.me.functions &&
	                model.me.functions.ADMIN_LOCAL && model.me.functions.ADMIN_LOCAL.scope;
	        };
	        $scope.getAvatar = function () {
	            return entcore_1.skin.theme + "../../" + $scope.defaultAvatar;
	        };
	        $scope.showConversationHistory = function () {
	            if ($scope.isSlided) {
	                $scope.messageHistory = entcore_1.idiom.translate('message.history.show');
	            }
	            else {
	                $scope.messageHistory = entcore_1.idiom.translate('message.history.hide');
	            }
	            $scope.isSlided = !$scope.isSlided;
	        };
	    }
	]);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (this && this.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(__webpack_require__(4), exports);
	__exportStar(__webpack_require__(48), exports);
	__exportStar(__webpack_require__(6), exports);
	__exportStar(__webpack_require__(47), exports);
	__exportStar(__webpack_require__(5), exports);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SystemFolders = exports.UserFolders = exports.UserFolder = exports.Outbox = exports.Draft = exports.Inbox = exports.Trash = exports.SystemFolder = exports.Folder = void 0;
	var entcore_1 = __webpack_require__(1);
	var conversation_1 = __webpack_require__(5);
	var mail_1 = __webpack_require__(48);
	var quota_1 = __webpack_require__(47);
	var entcore_toolkit_1 = __webpack_require__(7);
	var axios_1 = __webpack_require__(15);
	var Folder = /** @class */ (function () {
	    function Folder(api) {
	        this.eventer = new entcore_toolkit_1.Eventer();
	        this.api = api;
	        this.filter = false;
	        this.reverse = true;
	        this.nbUnread = 0;
	    }
	    Folder.purgeCache = function () {
	        setCookie("convVersion", new Date().getTime() + "");
	    };
	    Folder.prototype.getName = function () {
	        if (this instanceof SystemFolder) {
	            return this.folderName.toUpperCase();
	            ;
	        }
	        if (this instanceof UserFolder) {
	            return this.id;
	        }
	        return "";
	    };
	    Folder.prototype.nextPage = function (select) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(!this.mails.full && !this.mails.pageLoading)) return [3 /*break*/, 2];
	                        this.pageNumber++;
	                        return [4 /*yield*/, this.mails.sync({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter, selectAll: select })];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Folder.prototype.search = function (text) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.mails.full = false;
	                        this.pageNumber = 0;
	                        this.searchText = text;
	                        return [4 /*yield*/, this.mails.sync({ pageNumber: 0, searchText: this.searchText, emptyList: true, filterUnread: this.filter })];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Folder.prototype.filterUnread = function (filter) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.mails.full = false;
	                        this.filter = filter;
	                        this.pageNumber = 0;
	                        return [4 /*yield*/, this.mails.sync({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: true, filterUnread: this.filter })];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Folder.prototype.countUnread = function (purge) {
	        return __awaiter(this, void 0, void 0, function () {
	            var name, restrain, response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        name = this.getName();
	                        if (this instanceof SystemFolder) {
	                            restrain = '';
	                        }
	                        if (this instanceof UserFolder) {
	                            restrain = '&restrain=';
	                        }
	                        if (purge) {
	                            Folder.purgeCache();
	                        }
	                        return [4 /*yield*/, axios_1.default.get('/conversation/count/' + name + '?unread=true' + restrain)];
	                    case 1:
	                        response = _a.sent();
	                        this.nbUnread = parseInt(response.data.count);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Folder.prototype.toggleUnreadSelection = function (unread) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.mails.toggleUnread(unread)];
	                    case 1:
	                        _a.sent();
	                        this.mails.selection.deselectAll();
	                        return [4 /*yield*/, quota_1.quota.refresh()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, this.countUnread(true)];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Folder;
	}());
	exports.Folder = Folder;
	var SystemFolder = /** @class */ (function (_super) {
	    __extends(SystemFolder, _super);
	    function SystemFolder(api) {
	        var _this = _super.call(this, api) || this;
	        var thatFolder = _this;
	        _this.pageNumber = 0;
	        _this.mails = new mail_1.Mails(api);
	        return _this;
	    }
	    return SystemFolder;
	}(Folder));
	exports.SystemFolder = SystemFolder;
	var Trash = /** @class */ (function (_super) {
	    __extends(Trash, _super);
	    function Trash() {
	        var _this = _super.call(this, {
	            get: '/conversation/list/trash'
	        }) || this;
	        _this.userFolders = new entcore_toolkit_1.Selection([]);
	        _this.folderName = 'trash';
	        return _this;
	    }
	    Trash.prototype.selectAll = function () {
	        this.mails.selection.selectAll();
	        this.userFolders.selectAll();
	    };
	    Trash.prototype.deselectAll = function () {
	        this.mails.selection.deselectAll();
	        this.userFolders.deselectAll();
	    };
	    Trash.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.mails.sync({ searchText: this.searchText })];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.syncUsersFolders()];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Trash.prototype.syncUsersFolders = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.userFolders.all.splice(0, this.userFolders.all.length);
	                        return [4 /*yield*/, axios_1.default.get('folders/list?trash=')];
	                    case 1:
	                        response = _a.sent();
	                        response.data.forEach(function (f) { return _this.userFolders.all.push(entcore_toolkit_1.Mix.castAs(UserFolder, f)); });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Trash.prototype.removeSelection = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _i, _a, folder;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (!(this.mails.selection.selected.length > 0)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.removeMails()];
	                    case 1:
	                        _b.sent();
	                        _b.label = 2;
	                    case 2:
	                        _i = 0, _a = this.userFolders.selected;
	                        _b.label = 3;
	                    case 3:
	                        if (!(_i < _a.length)) return [3 /*break*/, 6];
	                        folder = _a[_i];
	                        return [4 /*yield*/, folder.delete()];
	                    case 4:
	                        _b.sent();
	                        _b.label = 5;
	                    case 5:
	                        _i++;
	                        return [3 /*break*/, 3];
	                    case 6: return [4 /*yield*/, quota_1.quota.refresh()];
	                    case 7:
	                        _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Trash.prototype.restore = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _i, _a, folder;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.restoreMails()];
	                    case 1:
	                        _b.sent();
	                        _i = 0, _a = this.userFolders.selected;
	                        _b.label = 2;
	                    case 2:
	                        if (!(_i < _a.length)) return [3 /*break*/, 5];
	                        folder = _a[_i];
	                        return [4 /*yield*/, folder.restore()];
	                    case 3:
	                        _b.sent();
	                        _b.label = 4;
	                    case 4:
	                        _i++;
	                        return [3 /*break*/, 2];
	                    case 5: return [4 /*yield*/, this.syncUsersFolders()];
	                    case 6:
	                        _b.sent();
	                        return [4 /*yield*/, this.countUnread(true)];
	                    case 7:
	                        _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Trash.prototype.restoreMails = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (!this.mails.selection.length) {
	                            return [2 /*return*/];
	                        }
	                        return [4 /*yield*/, axios_1.default.put('/conversation/restore', { id: entcore_1._.pluck(this.mails.selection.selected, 'id') })];
	                    case 1:
	                        _b.sent();
	                        _a = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 2:
	                        _a.pageNumber = _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Trash.prototype.removeMails = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response, _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('/conversation/delete', { id: entcore_1._.pluck(this.mails.selection.selected, 'id') })];
	                    case 1:
	                        response = _b.sent();
	                        _a = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 2:
	                        _a.pageNumber = _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Trash.prototype.removeAll = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.delete('/conversation/emptyTrash')];
	                    case 1:
	                        response = _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Trash;
	}(SystemFolder));
	exports.Trash = Trash;
	var Inbox = /** @class */ (function (_super) {
	    __extends(Inbox, _super);
	    function Inbox() {
	        var _this = _super.call(this, {
	            get: '/conversation/list/inbox'
	        }) || this;
	        _this.folderName = 'inbox';
	        return _this;
	    }
	    Inbox.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.mails.sync({ searchText: this.searchText })];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Inbox.prototype.removeSelection = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.mails.toTrash()];
	                    case 1:
	                        _b.sent();
	                        _a = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 2:
	                        _a.pageNumber = _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Inbox.prototype.selectAll = function () {
	        this.mails.selection.selectAll();
	    };
	    Inbox.prototype.deselectAll = function () {
	        this.mails.selection.deselectAll();
	    };
	    return Inbox;
	}(SystemFolder));
	exports.Inbox = Inbox;
	var Draft = /** @class */ (function (_super) {
	    __extends(Draft, _super);
	    function Draft() {
	        var _this = _super.call(this, {
	            get: '/conversation/list/draft'
	        }) || this;
	        _this.folderName = 'draft';
	        _this.totalNb = 0;
	        return _this;
	    }
	    Draft.prototype.selectAll = function () {
	        this.mails.selection.selectAll();
	    };
	    Draft.prototype.deselectAll = function () {
	        this.mails.selection.deselectAll();
	    };
	    Draft.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.mails.sync({ searchText: this.searchText })];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.countTotal()];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Draft.prototype.removeSelection = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.mails.toTrash()];
	                    case 1:
	                        _b.sent();
	                        _a = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 2:
	                        _a.pageNumber = _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Draft.prototype.saveDraft = function (draft) {
	        return __awaiter(this, void 0, void 0, function () {
	            var id;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        id = draft.id;
	                        return [4 /*yield*/, draft.saveAsDraft()];
	                    case 1:
	                        _a.sent();
	                        this.mails.push(draft);
	                        if (id == undefined && draft.id != undefined)
	                            this.totalNb++;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Draft.prototype.transfer = function (mail, newMail) {
	        return __awaiter(this, void 0, void 0, function () {
	            var _i, _a, attachment, e_1;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.saveDraft(newMail)];
	                    case 1:
	                        _b.sent();
	                        _b.label = 2;
	                    case 2:
	                        _b.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, axios_1.default.put("message/" + newMail.id + "/forward/" + mail.id)];
	                    case 3:
	                        _b.sent();
	                        for (_i = 0, _a = mail.attachments; _i < _a.length; _i++) {
	                            attachment = _a[_i];
	                            newMail.attachments.push(JSON.parse(JSON.stringify(attachment)));
	                        }
	                        quota_1.quota.refresh();
	                        return [3 /*break*/, 5];
	                    case 4:
	                        e_1 = _b.sent();
	                        entcore_1.notify.error(e_1.data.error);
	                        return [3 /*break*/, 5];
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Draft.prototype.countTotal = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.get('/conversation/count/DRAFT?unread=false')];
	                    case 1:
	                        response = _a.sent();
	                        this.totalNb = parseInt(response.data.count);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Draft;
	}(SystemFolder));
	exports.Draft = Draft;
	var Outbox = /** @class */ (function (_super) {
	    __extends(Outbox, _super);
	    function Outbox() {
	        var _this = _super.call(this, {
	            get: '/conversation/list/outbox'
	        }) || this;
	        _this.folderName = 'outbox';
	        return _this;
	    }
	    Outbox.prototype.selectAll = function () {
	        this.mails.selection.selectAll();
	    };
	    Outbox.prototype.deselectAll = function () {
	        this.mails.selection.deselectAll();
	    };
	    Outbox.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.mails.sync({ searchText: this.searchText })];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Outbox.prototype.removeSelection = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.mails.toTrash()];
	                    case 1:
	                        _b.sent();
	                        _a = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 2:
	                        _a.pageNumber = _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Outbox;
	}(SystemFolder));
	exports.Outbox = Outbox;
	var UserFolder = /** @class */ (function (_super) {
	    __extends(UserFolder, _super);
	    function UserFolder(data) {
	        var _this = _super.call(this, data) || this;
	        _this.mailLoadingState = "idle";
	        _this.syncUserFoldersState = "idle";
	        _this.userFolders = new entcore_toolkit_1.Selection([]);
	        _this.mails = new mail_1.Mails(_this);
	        var thatFolder = _this;
	        _this.pageNumber = 0;
	        return _this;
	    }
	    Object.defineProperty(UserFolder.prototype, "canOpen", {
	        get: function () { return this.syncUserFoldersState != "loaded" || this.userFolders.all.length; },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(UserFolder.prototype, "isLoading", {
	        get: function () { return this.mailLoadingState == "loading" || this.syncUserFoldersState == "loading"; },
	        enumerable: false,
	        configurable: true
	    });
	    UserFolder.prototype.removeMailsFromFolder = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _i, _a, mail, _b;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        _i = 0, _a = this.mails.selection.selected;
	                        _c.label = 1;
	                    case 1:
	                        if (!(_i < _a.length)) return [3 /*break*/, 4];
	                        mail = _a[_i];
	                        return [4 /*yield*/, mail.removeFromFolder()];
	                    case 2:
	                        _c.sent();
	                        _c.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4:
	                        _b = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 5:
	                        _b.pageNumber = _c.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.removeSelection = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.mails.toTrash()];
	                    case 1:
	                        _b.sent();
	                        _a = this;
	                        return [4 /*yield*/, this.mails.refreshSegment({ pageNumber: this.pageNumber, searchText: this.searchText, emptyList: false, filterUnread: this.filter })];
	                    case 2:
	                        _a.pageNumber = _b.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.open = function (onSync) {
	        return __awaiter(this, void 0, void 0, function () {
	            var promise;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.mails.full = false;
	                        this.pageNumber = 0;
	                        this.searchText = null;
	                        this.filter = false;
	                        conversation_1.Conversation.instance.currentFolder = this;
	                        promise = this.sync();
	                        onSync && onSync();
	                        return [4 /*yield*/, promise];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this.mailLoadingState == "loading")
	                            return [2 /*return*/];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, , 3, 4]);
	                        this.mailLoadingState = "loading";
	                        return [4 /*yield*/, this.mails.sync({ searchText: this.searchText })];
	                    case 2:
	                        _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        this.mailLoadingState = "loaded";
	                        return [7 /*endfinally*/];
	                    case 4: return [4 /*yield*/, this.syncUserFolders()];
	                    case 5:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.selectAll = function () {
	        this.mails.selection.selectAll();
	    };
	    UserFolder.prototype.deselectAll = function () {
	        this.mails.selection.deselectAll();
	    };
	    UserFolder.prototype.syncUserFolders = function (ifNotLoaded) {
	        if (ifNotLoaded === void 0) { ifNotLoaded = false; }
	        return __awaiter(this, void 0, void 0, function () {
	            var response, _i, _a, f, folder;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (ifNotLoaded && this.syncUserFoldersState == "loaded") {
	                            return [2 /*return*/];
	                        }
	                        //avoid multiple parallel sync
	                        if (this.syncUserFoldersState == "loading") {
	                            return [2 /*return*/];
	                        }
	                        _b.label = 1;
	                    case 1:
	                        _b.trys.push([1, , 3, 4]);
	                        this.syncUserFoldersState = "loading";
	                        return [4 /*yield*/, axios_1.default.get('userfolders/list?unread=true&parentId=' + this.id)];
	                    case 2:
	                        response = _b.sent();
	                        this.userFolders.all.splice(0, this.userFolders.colLength);
	                        for (_i = 0, _a = response.data; _i < _a.length; _i++) {
	                            f = _a[_i];
	                            folder = entcore_toolkit_1.Mix.castAs(UserFolder, f);
	                            folder.parentFolder = this;
	                            this.userFolders.push(folder);
	                        }
	                        return [3 /*break*/, 4];
	                    case 3:
	                        this.syncUserFoldersState = "loaded";
	                        return [7 /*endfinally*/];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.depth = function () {
	        var depth = 1;
	        var ancestor = this.parentFolder;
	        while (ancestor) {
	            ancestor = ancestor.parentFolder;
	            depth = depth + 1;
	        }
	        return depth;
	    };
	    UserFolder.prototype.create = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var json, e_2;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        json = !this.parentFolderId ? {
	                            name: this.name
	                        } : {
	                            name: this.name,
	                            parentId: this.parentFolderId
	                        };
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.post('folder', json)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                    case 3:
	                        e_2 = _a.sent();
	                        if (e_2.response.data && e_2.response.data.error) {
	                            entcore_1.notify.error(entcore_1.idiom.translate(e_2.response.data.error));
	                        }
	                        return [3 /*break*/, 4];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.update = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var json, e_3;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        json = {
	                            name: this.name
	                        };
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.put('folder/' + this.id, json)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                    case 3:
	                        e_3 = _a.sent();
	                        if (e_3.response.data && e_3.response.data.error) {
	                            entcore_1.notify.error(entcore_1.idiom.translate(e_3.response.data.error));
	                        }
	                        return [3 /*break*/, 4];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolder.prototype.trash = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, axios_1.default.put('folder/trash/' + this.id)];
	            });
	        });
	    };
	    UserFolder.prototype.restore = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, axios_1.default.put('folder/restore/' + this.id)];
	            });
	        });
	    };
	    UserFolder.prototype.delete = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, axios_1.default.delete('folder/' + this.id)];
	            });
	        });
	    };
	    return UserFolder;
	}(Folder));
	exports.UserFolder = UserFolder;
	var UserFolders = /** @class */ (function () {
	    function UserFolders() {
	    }
	    UserFolders.prototype.forEach = function (cb) {
	        return this.all.forEach(cb);
	    };
	    UserFolders.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response, data;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.get('userfolders/list?unread=true')];
	                    case 1:
	                        response = _a.sent();
	                        data = response.data;
	                        this.all = entcore_toolkit_1.Mix.castArrayAs(UserFolder, data);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    UserFolders.prototype.countUnread = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _i, _a, folder;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        _i = 0, _a = this.all;
	                        _b.label = 1;
	                    case 1:
	                        if (!(_i < _a.length)) return [3 /*break*/, 4];
	                        folder = _a[_i];
	                        return [4 /*yield*/, folder.countUnread()];
	                    case 2:
	                        _b.sent();
	                        _b.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return UserFolders;
	}());
	exports.UserFolders = UserFolders;
	var SystemFolders = /** @class */ (function () {
	    function SystemFolders() {
	        this.inbox = new Inbox();
	        this.trash = new Trash();
	        this.draft = new Draft();
	        this.outbox = new Outbox();
	    }
	    SystemFolders.prototype.openFolder = function (folderName) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        conversation_1.Conversation.instance.currentFolder = this[folderName];
	                        conversation_1.Conversation.instance.currentFolder.searchText = null;
	                        conversation_1.Conversation.instance.currentFolder.filter = false;
	                        return [4 /*yield*/, conversation_1.Conversation.instance.currentFolder.sync()];
	                    case 1:
	                        _a.sent();
	                        conversation_1.Conversation.instance.currentFolder.pageNumber = 0;
	                        conversation_1.Conversation.instance.currentFolder.mails.full = false;
	                        conversation_1.Conversation.instance.currentFolder.eventer.trigger('change');
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return SystemFolders;
	}());
	exports.SystemFolders = SystemFolders;
	function setCookie(cname, cvalue, exdays) {
	    if (exdays === void 0) { exdays = 1; }
	    var d = new Date();
	    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
	    var expires = "expires=" + d.toUTCString();
	    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
	}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// Copyright © WebServices pour l'Éducation, 2014
	//
	// This file is part of ENT Core. ENT Core is a versatile ENT engine based on the JVM.
	//
	// This program is free software; you can redistribute it and/or modify
	// it under the terms of the GNU Affero General Public License as
	// published by the Free Software Foundation (version 3 of the License).
	//
	// For the sake of explanation, any module that communicate over native
	// Web protocols, such as HTTP, with ENT Core is outside the scope of this
	// license and could be license under its own terms. This is merely considered
	// normal use of ENT Core, and does not fall under the heading of "covered work".
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Conversation = void 0;
	var entcore_1 = __webpack_require__(1);
	var folder_1 = __webpack_require__(4);
	var user_1 = __webpack_require__(6);
	var quota_1 = __webpack_require__(47);
	var entcore_toolkit_1 = __webpack_require__(7);
	var axios_1 = __webpack_require__(15);
	var Conversation = /** @class */ (function () {
	    function Conversation() {
	        this.eventer = new entcore_toolkit_1.Eventer();
	        this.preference = { useSignature: false, signature: "" };
	        this.users = new user_1.Users();
	        this.folders = new folder_1.SystemFolders();
	        this.userFolders = new folder_1.UserFolders();
	        this.folders.inbox.countUnread();
	    }
	    Object.defineProperty(Conversation, "instance", {
	        get: function () {
	            if (!this._instance) {
	                this._instance = new Conversation();
	            }
	            return this._instance;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Conversation.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.get('max-depth')];
	                    case 1:
	                        response = _a.sent();
	                        this.maxFolderDepth = parseInt(response.data['max-depth']);
	                        this.eventer.trigger('change');
	                        return [4 /*yield*/, this.getPreference()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, this.userFolders.sync()];
	                    case 3:
	                        _a.sent();
	                        return [4 /*yield*/, quota_1.quota.refresh()];
	                    case 4:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Conversation.prototype.getPreference = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response, e_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, axios_1.default.get('/userbook/preference/conversation')];
	                    case 1:
	                        response = _a.sent();
	                        if (response.data.preference)
	                            this.preference = JSON.parse(response.data.preference);
	                        return [3 /*break*/, 3];
	                    case 2:
	                        e_1 = _a.sent();
	                        entcore_1.notify.error(e_1.response.data.error);
	                        return [3 /*break*/, 3];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Conversation.prototype.putPreference = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('/userbook/preference/conversation', this.preference)];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Conversation;
	}());
	exports.Conversation = Conversation;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Users = exports.User = void 0;
	var entcore_1 = __webpack_require__(1);
	var entcore_toolkit_1 = __webpack_require__(7);
	var axios_1 = __webpack_require__(15);
	var User = /** @class */ (function () {
	    function User(id, displayName, profile, isGroup) {
	        this.id = id;
	        this.profile = profile;
	        this.isGroup = isGroup;
	        if (this.isGroup) {
	            this.name = displayName;
	        }
	        this.displayName = displayName;
	    }
	    User.prototype.toString = function () {
	        return (this.displayName || '') + (this.name || '');
	    };
	    User.prototype.findData = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var that, response, userData, result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        that = this;
	                        return [4 /*yield*/, axios_1.default.get('/userbook/api/person?id=' + this.id)];
	                    case 1:
	                        response = _a.sent();
	                        userData = response.data;
	                        if (!userData.result[0]) // If group
	                            return [2 /*return*/, true];
	                        result = userData.result[0];
	                        entcore_toolkit_1.Mix.extend(this, { id: that.id, displayName: result.displayName, profile: result.type[0] });
	                        return [2 /*return*/, true];
	                }
	            });
	        });
	    };
	    User.prototype.findGroupData = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.get('/directory/group/' + this.id)];
	                    case 1:
	                        response = _a.sent();
	                        entcore_toolkit_1.Mix.extend(this, { id: this.id, name: response.data.name, isGroup: true });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    User.prototype.mapUser = function (displayNames, id) {
	        return entcore_1._.map(entcore_1._.filter(displayNames, function (user) {
	            return user[0] === id;
	        }), function (user) {
	            return new User(user[0], user[1], null, user[2]);
	        })[0];
	    };
	    User.prototype.isMe = function () {
	        return entcore_1.model.me.userId == this.id;
	    };
	    User.prototype.isAGroup = function () {
	        if (!this.id)
	            return false;
	        return this.isGroup;
	    };
	    return User;
	}());
	exports.User = User;
	var Users = /** @class */ (function () {
	    function Users() {
	        this.eventer = new entcore_toolkit_1.Eventer();
	        this.searchCachedMap = {};
	    }
	    Users.prototype.sync = function (search) {
	        return __awaiter(this, void 0, void 0, function () {
	            var newArr, response, bookmarks;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        newArr = [];
	                        return [4 /*yield*/, axios_1.default.get('/directory/sharebookmark/all')];
	                    case 1:
	                        response = _a.sent();
	                        bookmarks = entcore_1._.map(response.data, function (bookmark) {
	                            bookmark.type = 'sharebookmark';
	                            return bookmark;
	                        });
	                        newArr = entcore_toolkit_1.Mix.castArrayAs(User, bookmarks);
	                        return [4 /*yield*/, axios_1.default.get('/conversation/visible?search=' + search)];
	                    case 2:
	                        response = _a.sent();
	                        response.data.groups.forEach(function (group) {
	                            group.isGroup = true;
	                            newArr.push(entcore_toolkit_1.Mix.castAs(User, group));
	                        });
	                        newArr = newArr.concat(entcore_toolkit_1.Mix.castArrayAs(User, response.data.users));
	                        return [2 /*return*/, newArr];
	                }
	            });
	        });
	    };
	    Users.prototype.findUser = function (search, include, exclude, restriction) {
	        return __awaiter(this, void 0, void 0, function () {
	            var startText, _a, _b, searchTerm, found;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        startText = restriction ? search.text.substr(0, 3) : '';
	                        if (!!this.searchCachedMap[startText]) return [3 /*break*/, 2];
	                        this.searchCachedMap[startText] = [];
	                        _a = this.searchCachedMap;
	                        _b = startText;
	                        return [4 /*yield*/, this.sync(startText)];
	                    case 1:
	                        _a[_b] = _c.sent();
	                        _c.label = 2;
	                    case 2:
	                        searchTerm = entcore_1.idiom.removeAccents(search.text).toLowerCase();
	                        found = entcore_1._.filter(this.searchCachedMap[startText].filter(function (user) {
	                            var includeUser = entcore_1._.findWhere(include, { id: user.id });
	                            if (includeUser !== undefined)
	                                includeUser.profile = user.profile;
	                            return includeUser === undefined;
	                        })
	                            .concat(include), function (user) {
	                            var testDisplayName = '', testNameReversed = '';
	                            if (user.displayName) {
	                                testDisplayName = entcore_1.idiom.removeAccents(user.displayName).toLowerCase();
	                                testNameReversed = entcore_1.idiom.removeAccents(user.displayName.split(' ')[1] + ' '
	                                    + user.displayName.split(' ')[0]).toLowerCase();
	                            }
	                            var testName = '';
	                            if (user.name) {
	                                testName = entcore_1.idiom.removeAccents(user.name).toLowerCase();
	                            }
	                            return testDisplayName.indexOf(searchTerm) !== -1 ||
	                                testNameReversed.indexOf(searchTerm) !== -1 ||
	                                testName.indexOf(searchTerm) !== -1;
	                        });
	                        return [2 /*return*/, entcore_1._.reject(found, function (element) {
	                                return entcore_1._.findWhere(exclude, { id: element.id });
	                            })];
	                }
	            });
	        });
	    };
	    return Users;
	}());
	exports.Users = Users;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(8));

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(9));
	__export(__webpack_require__(10));
	__export(__webpack_require__(11));
	__export(__webpack_require__(12));
	__export(__webpack_require__(45));
	__export(__webpack_require__(46));


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	function mapToArray(map) {
	    var result = [];
	    map.forEach(function (item) {
	        result.push(item);
	    });
	    return result;
	}
	var Mix = (function () {
	    function Mix() {
	    }
	    Mix.extend = function (obj, mixin, casts) {
	        var _loop_1 = function () {
	            var value = mixin[property];
	            if (casts && casts[property] && value) {
	                var castItem = casts[property];
	                var cast_1;
	                if (castItem instanceof Function) {
	                    cast_1 = {
	                        type: castItem,
	                        deps: []
	                    };
	                }
	                else {
	                    cast_1 = {
	                        type: castItem.type,
	                        single: castItem.single,
	                        deps: castItem.deps ? castItem.deps : []
	                    };
	                }
	                var doCast_1 = function (v) {
	                    var instance = new ((_a = cast_1.type).bind.apply(_a, [void 0].concat(cast_1.deps)))();
	                    if (instance.mixin)
	                        instance.mixin(v);
	                    else
	                        Mix.extend(instance, v);
	                    return instance;
	                    var _a;
	                };
	                if (value instanceof Array && cast_1.single) {
	                    obj[property] = [];
	                    value.forEach(function (v) {
	                        obj[property].push(doCast_1(v));
	                    });
	                }
	                else {
	                    obj[property] = doCast_1(value);
	                }
	            }
	            else if (!value || typeof value !== 'object' || value instanceof Array) {
	                obj[property] = value;
	            }
	            else {
	                if (obj[property] instanceof TypedArray) {
	                    obj[property].load(value);
	                }
	                else {
	                    if (!obj[property]) {
	                        obj[property] = {};
	                    }
	                    this_1.extend(obj[property], value);
	                }
	            }
	        };
	        var this_1 = this;
	        for (var property in mixin) {
	            _loop_1();
	        }
	        if (obj && obj.fromJSON) {
	            obj.fromJSON(mixin);
	        }
	    };
	    Mix.castAs = function (className, obj, params) {
	        if (params === void 0) { params = {}; }
	        var newObj = new className(params);
	        this.extend(newObj, obj);
	        return newObj;
	    };
	    Mix.castArrayAs = function (className, arr, params) {
	        if (params === void 0) { params = {}; }
	        var newArr = [];
	        arr.forEach(function (item) {
	            newArr.push(Mix.castAs(className, item, params));
	        });
	        return newArr;
	    };
	    return Mix;
	}());
	exports.Mix = Mix;
	var TypedArray = (function (_super) {
	    __extends(TypedArray, _super);
	    function TypedArray(className, mixin) {
	        if (mixin === void 0) { mixin = {}; }
	        var _this = _super.call(this) || this;
	        _this.className = className;
	        _this.mixin = mixin;
	        return _this;
	    }
	    TypedArray.prototype.push = function () {
	        var _this = this;
	        var items = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            items[_i - 0] = arguments[_i];
	        }
	        items.forEach(function (item) {
	            if (!(item instanceof _this.className)) {
	                item = Mix.castAs(_this.className, item);
	            }
	            for (var prop in _this.mixin) {
	                item[prop] = _this.mixin[prop];
	            }
	            Array.prototype.push.call(_this, item);
	        });
	        return this.length;
	    };
	    TypedArray.prototype.load = function (data) {
	        var _this = this;
	        data.forEach(function (item) {
	            _this.push(item);
	        });
	    };
	    TypedArray.prototype.asArray = function () {
	        return mapToArray(this);
	    };
	    TypedArray.prototype.toJSON = function () {
	        return mapToArray(this);
	    };
	    return TypedArray;
	}(Array));
	exports.TypedArray = TypedArray;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	"use strict";
	var Eventer = (function () {
	    function Eventer() {
	        this.events = new Map();
	    }
	    Eventer.prototype.trigger = function (eventName, data) {
	        if (this.events[eventName]) {
	            this.events[eventName].forEach(function (f) { return f(data); });
	        }
	    };
	    Eventer.prototype.on = function (eventName, cb) {
	        if (!this.events[eventName]) {
	            this.events[eventName] = [];
	        }
	        this.events[eventName].push(cb);
	    };
	    Eventer.prototype.off = function (eventName, cb) {
	        if (!this.events[eventName]) {
	            return;
	        }
	        if (cb === undefined) {
	            this.events[eventName] = [];
	            return;
	        }
	        var index = this.events[eventName].indexOf(cb);
	        if (index !== -1) {
	            this.events[eventName].splice(index, 1);
	        }
	    };
	    Eventer.prototype.once = function (eventName, cb) {
	        var _this = this;
	        var callback = function (data) {
	            cb(data);
	            _this.off(eventName, callback);
	        };
	        this.on(eventName, callback);
	    };
	    return Eventer;
	}());
	exports.Eventer = Eventer;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	"use strict";
	var Selection = (function () {
	    function Selection(arr) {
	        this.arr = arr;
	        this.selectedElements = [];
	    }
	    Object.defineProperty(Selection.prototype, "all", {
	        get: function () {
	            return this.arr;
	        },
	        set: function (all) {
	            this.arr = all;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Selection.prototype.filter = function (filter) {
	        return this.arr.filter(filter);
	    };
	    Selection.prototype.push = function (item) {
	        this.arr.push(item);
	    };
	    Selection.prototype.addRange = function (arr) {
	        for (var i = 0; i < arr.length; i++) {
	            this.all.push(arr[i]);
	        }
	    };
	    Object.defineProperty(Selection.prototype, "colLength", {
	        get: function () {
	            return this.arr.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Selection.prototype, "length", {
	        get: function () {
	            return this.selected.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Selection.prototype.forEach = function (func) {
	        this.arr.forEach(func);
	    };
	    Selection.prototype.selectAll = function () {
	        for (var i = 0; i < this.arr.length; i++) {
	            this.arr[i].selected = true;
	        }
	    };
	    Selection.prototype.select = function (filter) {
	        for (var i = 0; i < this.arr.length; i++) {
	            this.arr[i].selected = filter(this.arr[i]);
	        }
	    };
	    Selection.prototype.deselect = function (filter) {
	        for (var i = 0; i < this.arr.length; i++) {
	            this.arr[i].selected = !filter(this.arr[i]);
	        }
	    };
	    Selection.prototype.deselectAll = function () {
	        for (var i = 0; i < this.arr.length; i++) {
	            this.arr[i].selected = false;
	        }
	    };
	    Selection.prototype.removeSelection = function () {
	        var newArr = [];
	        for (var i = 0; i < this.arr.length; i++) {
	            if (!this.arr[i].selected) {
	                newArr.push(this.arr[i]);
	            }
	        }
	        this.arr.splice(0, this.arr.length);
	        for (var i = 0; i < newArr.length; i++) {
	            this.arr.push(newArr[i]);
	        }
	    };
	    Selection.prototype.updateSelected = function () {
	        for (var i = 0; i < this.arr.length; i++) {
	            var index = this.selectedElements.indexOf(this.arr[i]);
	            if (this.arr[i].selected && index === -1) {
	                this.selectedElements.push(this.arr[i]);
	            }
	            else if (!this.arr[i].selected && index !== -1) {
	                this.selectedElements.splice(index, 1);
	            }
	        }
	        for (var i = 0; i < this.selectedElements.length; i++) {
	            var index = this.arr.indexOf(this.selectedElements[i]);
	            if (index === -1) {
	                this.selectedElements.splice(index, 1);
	            }
	        }
	    };
	    Object.defineProperty(Selection.prototype, "selected", {
	        // a specific array is maintained to avoid references breaking all the time
	        get: function () {
	            this.updateSelected();
	            return this.selectedElements;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Selection;
	}());
	exports.Selection = Selection;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(13));
	__export(__webpack_require__(14));
	__export(__webpack_require__(41));
	__export(__webpack_require__(42));
	__export(__webpack_require__(43));
	__export(__webpack_require__(44));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var minicast_1 = __webpack_require__(9);
	var AbstractCrud = (function () {
	    function AbstractCrud(api, model, initialCast, childrenCasts, customMixin) {
	        this.api = api;
	        this.model = model;
	        this.initialCast = initialCast;
	        this.childrenCasts = childrenCasts;
	        this.customMixin = customMixin;
	    }
	    AbstractCrud.prototype.parseApi = function (api, parameters) {
	        var _this = this;
	        if (typeof api === 'function') {
	            api = api();
	        }
	        return api.split(/(:[a-zA-Z0-9_.]+)/)
	            .map(function (fragment) {
	            return fragment.charAt(0) === ':' ?
	                parameters && parameters[fragment.substr(1)] ||
	                    _this.model[fragment.substr(1)] ||
	                    _this[fragment.substr(1)] ||
	                    fragment :
	                fragment;
	        }).join('');
	    };
	    AbstractCrud.prototype.defaultMixin = function (payload) {
	        var _this = this;
	        if (payload instanceof Array && this.model instanceof Array) {
	            this.model = [];
	            var model_1 = this.model; //fix type inference
	            payload.forEach(function (item) {
	                var instance = {};
	                if (_this.initialCast) {
	                    if (_this.initialCast instanceof Function) {
	                        instance = new _this.initialCast();
	                    }
	                    else {
	                        instance = new ((_a = _this.initialCast.type).bind.apply(_a, [void 0].concat(_this.initialCast.deps)))();
	                    }
	                }
	                minicast_1.Mix.extend(instance, item, _this.childrenCasts);
	                model_1.push(instance);
	                var _a;
	            });
	        }
	        else {
	            minicast_1.Mix.extend(this.model, payload, this.childrenCasts);
	        }
	    };
	    AbstractCrud.prototype.create = function (item, opts) {
	        var _this = this;
	        if (opts === void 0) { opts = {}; }
	        if (!this.api.create) {
	            throw '[Crud][Api] "create" route is undefined';
	        }
	        return this.http.post(this.parseApi(this.api.create, item), item || this.model, opts)
	            .then(function (response) {
	            if (_this.model instanceof Array) {
	                _this.model.push(item);
	            }
	            return response;
	        });
	    };
	    AbstractCrud.prototype.sync = function (opts) {
	        var _this = this;
	        if (opts === void 0) { opts = {}; }
	        if (!this.api.sync) {
	            throw '[Crud][Api] "sync" route is undefined';
	        }
	        return this.http.get(this.parseApi(this.api.sync), opts)
	            .then(function (response) {
	            (_this.customMixin || _this.defaultMixin).bind(_this)(response.data);
	            return response;
	        });
	    };
	    AbstractCrud.prototype.update = function (item, opts) {
	        if (opts === void 0) { opts = {}; }
	        if (!this.api.update) {
	            throw '[Crud][Api] "update" route is undefined';
	        }
	        return this.http.put(this.parseApi(this.api.update, item), item || this.model, opts);
	    };
	    AbstractCrud.prototype.delete = function (item, opts) {
	        var _this = this;
	        if (opts === void 0) { opts = {}; }
	        if (!this.api.delete) {
	            throw '[Crud][Api] "delete" route is undefined';
	        }
	        return this.http.delete(this.parseApi(this.api.delete, item), opts)
	            .then(function (response) {
	            if (_this.model instanceof Array) {
	                var index = _this.model.indexOf(item);
	                if (index !== -1) {
	                    _this.model.splice(_this.model.indexOf(item), 1);
	                }
	            }
	            return response;
	        });
	    };
	    return AbstractCrud;
	}());
	exports.AbstractCrud = AbstractCrud;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var axios_1 = __webpack_require__(15);
	var abstract_crud_1 = __webpack_require__(13);
	var Crud = (function (_super) {
	    __extends(Crud, _super);
	    function Crud() {
	        var _this = _super.apply(this, arguments) || this;
	        _this.http = axios_1.default;
	        return _this;
	    }
	    return Crud;
	}(abstract_crud_1.AbstractCrud));
	exports.Crud = Crud;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(16);

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	var bind = __webpack_require__(18);
	var Axios = __webpack_require__(19);
	var defaults = __webpack_require__(20);
	
	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);
	
	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);
	
	  // Copy context to instance
	  utils.extend(instance, context);
	
	  return instance;
	}
	
	// Create the default instance to be exported
	var axios = createInstance(defaults);
	
	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;
	
	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};
	
	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(38);
	axios.CancelToken = __webpack_require__(39);
	axios.isCancel = __webpack_require__(35);
	
	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(40);
	
	module.exports = axios;
	
	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var bind = __webpack_require__(18);
	
	/*global toString:true*/
	
	// utils is a library of generic helper functions non-specific to axios
	
	var toString = Object.prototype.toString;
	
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}
	
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}
	
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}
	
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}
	
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}
	
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	
	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}
	
	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var defaults = __webpack_require__(20);
	var utils = __webpack_require__(17);
	var InterceptorManager = __webpack_require__(32);
	var dispatchRequest = __webpack_require__(33);
	var isAbsoluteURL = __webpack_require__(36);
	var combineURLs = __webpack_require__(37);
	
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}
	
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }
	
	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	
	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }
	
	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }
	
	  return promise;
	};
	
	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	
	module.exports = Axios;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(17);
	var normalizeHeaderName = __webpack_require__(22);
	
	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};
	
	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}
	
	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(23);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(23);
	  }
	  return adapter;
	}
	
	var defaults = {
	  adapter: getDefaultAdapter(),
	
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],
	
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],
	
	  timeout: 0,
	
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	
	  maxContentLength: -1,
	
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	
	utils.forEach(['delete', 'get', 'head'], function forEachMehtodNoData(method) {
	  defaults.headers[method] = {};
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	
	module.exports = defaults;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(17);
	var settle = __webpack_require__(24);
	var buildURL = __webpack_require__(27);
	var parseHeaders = __webpack_require__(28);
	var isURLSameOrigin = __webpack_require__(29);
	var createError = __webpack_require__(25);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(30);
	
	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	
	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }
	
	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;
	
	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }
	
	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }
	
	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
	
	    // Set the request timeout in MS
	    request.timeout = config.timeout;
	
	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }
	
	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }
	
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	
	      settle(resolve, reject, response);
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(31);
	
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;
	
	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }
	
	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }
	
	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }
	
	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        if (request.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }
	
	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }
	
	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }
	
	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }
	
	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }
	
	    if (requestData === undefined) {
	      requestData = null;
	    }
	
	    // Send the request
	    request.send(requestData);
	  });
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var createError = __webpack_require__(25);
	
	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response
	    ));
	  }
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var enhanceError = __webpack_require__(26);
	
	/**
	 * Create an Error with the specified message, config, error code, and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, response);
	};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.response = response;
	  return error;
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}
	
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	
	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }
	
	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }
	
	      if (!utils.isArray(val)) {
	        val = [val];
	      }
	
	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	
	    serializedParams = parts.join('&');
	  }
	
	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	
	  return url;
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;
	
	  if (!headers) { return parsed; }
	
	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));
	
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });
	
	  return parsed;
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;
	
	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;
	
	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }
	
	      urlParsingNode.setAttribute('href', href);
	
	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }
	
	    originURL = resolveURL(window.location.href);
	
	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :
	
	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	'use strict';
	
	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js
	
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';
	
	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}
	
	module.exports = btoa;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));
	
	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }
	
	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }
	
	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }
	
	        if (secure === true) {
	          cookie.push('secure');
	        }
	
	        document.cookie = cookie.join('; ');
	      },
	
	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },
	
	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :
	
	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	function InterceptorManager() {
	  this.handlers = [];
	}
	
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};
	
	module.exports = InterceptorManager;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	var transformData = __webpack_require__(34);
	var isCancel = __webpack_require__(35);
	var defaults = __webpack_require__(20);
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);
	
	  // Ensure headers exist
	  config.headers = config.headers || {};
	
	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );
	
	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );
	
	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );
	
	  var adapter = config.adapter || defaults.adapter;
	
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);
	
	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );
	
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);
	
	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }
	
	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(17);
	
	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	
	  return data;
	};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 37 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}
	
	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};
	
	Cancel.prototype.__CANCEL__ = true;
	
	module.exports = Cancel;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Cancel = __webpack_require__(38);
	
	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }
	
	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }
	
	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};
	
	module.exports = CancelToken;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_crud_1 = __webpack_require__(13);
	var minicast_1 = __webpack_require__(9);
	var AbstractCollection = (function (_super) {
	    __extends(AbstractCollection, _super);
	    function AbstractCollection(api, initialCast, childrenCasts) {
	        var _this = _super.call(this, api, null, initialCast, childrenCasts) || this;
	        _this.data = [];
	        _this.model = _this.data;
	        _this.customMixin = _this.mixin;
	        return _this;
	    }
	    AbstractCollection.prototype.mixin = function (data) {
	        var _this = this;
	        if (!data || !(data instanceof Array)) {
	            throw "[Crud][Collection] An Array payload is expected.";
	        }
	        this.data = [];
	        data.forEach(function (item) {
	            var instance = {};
	            if (_this.initialCast) {
	                if (_this.initialCast instanceof Function) {
	                    instance = new _this.initialCast();
	                }
	                else {
	                    instance = new ((_a = _this.initialCast.type).bind.apply(_a, [void 0].concat(_this.initialCast.deps)))();
	                }
	            }
	            minicast_1.Mix.extend(instance, item, _this.childrenCasts);
	            _this.data.push(instance);
	            var _a;
	        });
	    };
	    return AbstractCollection;
	}(abstract_crud_1.AbstractCrud));
	exports.AbstractCollection = AbstractCollection;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var axios_1 = __webpack_require__(15);
	var abstract_collection_1 = __webpack_require__(41);
	var Collection = (function (_super) {
	    __extends(Collection, _super);
	    function Collection(api, initialCast, childrenCasts) {
	        var _this = _super.call(this, api, initialCast, childrenCasts) || this;
	        _this.http = axios_1.default;
	        return _this;
	    }
	    return Collection;
	}(abstract_collection_1.AbstractCollection));
	exports.Collection = Collection;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_crud_1 = __webpack_require__(13);
	var minicast_1 = __webpack_require__(9);
	var AbstractModel = (function (_super) {
	    __extends(AbstractModel, _super);
	    function AbstractModel(api, childrenCasts) {
	        var _this = _super.call(this, api, null, null, childrenCasts) || this;
	        _this.model = _this;
	        _this.customMixin = _this.mixin;
	        return _this;
	    }
	    AbstractModel.prototype.mixin = function (data) {
	        if (!data || !(data instanceof Object)) {
	            throw "[Crud][Collection] An Object payload is expected.";
	        }
	        minicast_1.Mix.extend(this, data, this.childrenCasts);
	    };
	    return AbstractModel;
	}(abstract_crud_1.AbstractCrud));
	exports.AbstractModel = AbstractModel;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var axios_1 = __webpack_require__(15);
	var abstract_model_1 = __webpack_require__(43);
	var Model = (function (_super) {
	    __extends(Model, _super);
	    function Model(api, childrenCasts) {
	        var _this = _super.call(this, api, childrenCasts) || this;
	        _this.http = axios_1.default;
	        return _this;
	    }
	    return Model;
	}(abstract_model_1.AbstractModel));
	exports.Model = Model;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
	    return { next: verb(0), "throw": verb(1), "return": verb(2) };
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [0, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var eventer_1 = __webpack_require__(10);
	var minicast_1 = __webpack_require__(9);
	var axios_1 = __webpack_require__(15);
	/*
	 * Tool to manage a single list provider used by multiple objects (to avoid multiple call to a same path)
	 * Usage :
	 * let provider = new Provider<T>(path, MyClass);
	 * function a(){
	 *    //get data from provider
	 *    let data = await provider.data();
	 * }
	 *
	 * function b(){
	 *    let data = await provider.data();
	 *    //get data when a refresh happens
	 *    provider.on('refresh', (newData) => data = newData));
	 * }
	 *
	 * //force provider refresh (after data invalidation)
	 * setTimeout(() => provider.refresh(), 50000);
	 *
	 * a();
	 * b();
	*/
	var Provider = (function () {
	    function Provider(path, className) {
	        this.path = path;
	        this.className = className;
	        this._data = [];
	        this.eventer = new eventer_1.Eventer();
	    }
	    Provider.prototype.data = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(!this.isSynced && !this.syncing))
	                            return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.sync()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        if (!this.syncing)
	                            return [3 /*break*/, 4];
	                        return [4 /*yield*/, this.syncDone()];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4: return [2 /*return*/, this._data];
	                }
	            });
	        });
	    };
	    Provider.prototype.syncDone = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return __generator(this, function (_a) {
	                return [2 /*return*/, new Promise(function (resolve, reject) {
	                        _this.eventer.once('sync', function () { return resolve(); });
	                    })];
	            });
	        });
	    };
	    Provider.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.syncing = true;
	                        return [4 /*yield*/, axios_1.default.get(this.path)];
	                    case 1:
	                        response = _a.sent();
	                        this._data = minicast_1.Mix.castArrayAs(this.className, response.data);
	                        this.isSynced = true;
	                        this.eventer.trigger('sync');
	                        this.syncing = false;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Provider.prototype.refresh = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.isSynced = false;
	                        return [4 /*yield*/, this.sync()];
	                    case 1:
	                        _a.sent();
	                        this.eventer.trigger('refresh');
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Provider.prototype.push = function (data) {
	        this._data.push(data);
	    };
	    Provider.prototype.remove = function (data) {
	        var index = this._data.indexOf(data);
	        if (index === -1)
	            return;
	        this._data.splice(index, 1);
	    };
	    return Provider;
	}());
	exports.Provider = Provider;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var axios_1 = __webpack_require__(15);
	var autosaved = [];
	var loopStarted = false;
	var token;
	var loop = function () {
	    autosaved.forEach(function (item) {
	        if (item._backup !== JSON.stringify(item.model)) {
	            if (item.fn) {
	                item.fn();
	            }
	            else {
	                axios_1.default[item.method](item.path, item.model);
	            }
	            item._backup = JSON.stringify(item.model);
	        }
	    });
	    loopStarted = true;
	    token = setTimeout(loop, 500);
	};
	var Autosave = (function () {
	    function Autosave() {
	    }
	    Autosave.watch = function (path, model, method) {
	        if (method === void 0) { method = 'put'; }
	        if (autosaved.findIndex(function (e) { return e.model === model && e.path === path; }) !== -1) {
	            return;
	        }
	        var autosave;
	        if (typeof path === 'string') {
	            autosave = {
	                model: model,
	                path: path,
	                method: method
	            };
	        }
	        else {
	            autosave = {
	                model: model,
	                fn: path,
	                method: method
	            };
	        }
	        autosaved.push(autosave);
	        if (!loopStarted) {
	            loop();
	        }
	    };
	    Autosave.unwatch = function (model) {
	        var index = autosaved.findIndex(function (e) { return e.model === model; });
	        autosaved.splice(index, 1);
	        if (autosaved.length === 0) {
	            this.unwatchAll();
	        }
	    };
	    Autosave.unwatchAll = function () {
	        autosaved = [];
	        clearTimeout(token);
	        loopStarted = false;
	    };
	    return Autosave;
	}());
	exports.Autosave = Autosave;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.quota = void 0;
	var entcore_1 = __webpack_require__(1);
	var axios_1 = __webpack_require__(15);
	var Quota = /** @class */ (function () {
	    function Quota() {
	        this.max = 1;
	        this.used = 0;
	        this.unit = 'Mo';
	    }
	    Quota.prototype.appropriateDataUnit = function (bytes) {
	        var order = 0;
	        var orders = {
	            0: entcore_1.idiom.translate("byte"),
	            1: "Ko",
	            2: "Mo",
	            3: "Go",
	            4: "To"
	        };
	        var finalNb = bytes;
	        while (finalNb >= 1024 && order < 4) {
	            finalNb = finalNb / 1024;
	            order++;
	        }
	        return {
	            nb: finalNb,
	            order: orders[order]
	        };
	    };
	    Quota.prototype.refresh = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response, data, e_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, axios_1.default.get('/workspace/quota/user/' + entcore_1.model.me.userId)];
	                    case 1:
	                        response = _a.sent();
	                        data = response.data;
	                        data.quota = data.quota / (1024 * 1024);
	                        data.storage = data.storage / (1024 * 1024);
	                        if (data.quota > 2000) {
	                            data.quota = Math.round((data.quota / 1024) * 10) / 10;
	                            data.storage = Math.round((data.storage / 1024) * 10) / 10;
	                            this.unit = 'Go';
	                        }
	                        else {
	                            data.quota = Math.round(data.quota);
	                            data.storage = Math.round(data.storage);
	                        }
	                        this.max = data.quota;
	                        this.used = data.storage;
	                        return [3 /*break*/, 3];
	                    case 2:
	                        e_1 = _a.sent();
	                        console.error("failed to compute quota: ", e_1);
	                        return [3 /*break*/, 3];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Quota;
	}());
	;
	exports.quota = new Quota();


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.format = exports.Mails = exports.Mail = exports.Attachment = void 0;
	var entcore_1 = __webpack_require__(1);
	var user_1 = __webpack_require__(6);
	var conversation_1 = __webpack_require__(5);
	var quota_1 = __webpack_require__(47);
	var folder_1 = __webpack_require__(4);
	var entcore_toolkit_1 = __webpack_require__(7);
	var axios_1 = __webpack_require__(15);
	var Attachment = /** @class */ (function () {
	    function Attachment(file) {
	        this.file = file;
	        this.progress = {
	            total: 100,
	            completion: 0
	        };
	    }
	    return Attachment;
	}());
	exports.Attachment = Attachment;
	var Mail = /** @class */ (function () {
	    function Mail(id) {
	        this.eventer = new entcore_toolkit_1.Eventer();
	        this.id = id;
	        this.loadingAttachments = [];
	        this.attachments = [];
	        this.allowReply = true;
	        this.allowReplyAll = true;
	    }
	    Mail.prototype.getBlob = function (attachment) {
	        return __awaiter(this, void 0, void 0, function () {
	            var url;
	            return __generator(this, function (_a) {
	                url = "message/".concat(this.id, "/attachment/").concat(attachment.id);
	                return [2 /*return*/, new Promise(function (resolve, reject) {
	                        var xhr = new XMLHttpRequest();
	                        xhr.open('GET', url, true);
	                        xhr.responseType = 'blob';
	                        xhr.onload = function (e) {
	                            if (xhr.status == 200) {
	                                resolve(xhr.response);
	                            }
	                            else {
	                                reject("Failed with status code: " + xhr.status);
	                            }
	                        };
	                        xhr.send();
	                    })];
	            });
	        });
	    };
	    Mail.prototype.toFolderPickerSources = function (attachments) {
	        return __awaiter(this, void 0, void 0, function () {
	            var contents, res;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        contents = attachments.map(function (a) { return __awaiter(_this, void 0, void 0, function () {
	                            var content;
	                            return __generator(this, function (_a) {
	                                switch (_a.label) {
	                                    case 0: return [4 /*yield*/, this.getBlob(a)];
	                                    case 1:
	                                        content = _a.sent();
	                                        return [2 /*return*/, {
	                                                action: "create-from-blob",
	                                                title: a.filename,
	                                                content: content
	                                            }];
	                                }
	                            });
	                        }); });
	                        return [4 /*yield*/, Promise.all(contents)];
	                    case 1:
	                        res = _a.sent();
	                        return [2 /*return*/, res];
	                }
	            });
	        });
	    };
	    Mail.prototype.isUserAuthor = function () {
	        return this.from === entcore_1.model.me.userId;
	    };
	    Mail.prototype.getSystemFolder = function () {
	        if (conversation_1.Conversation.instance.currentFolder.getName() !== 'OUTBOX' && (this.isMeInsideGroup(this.to) || this.isMeInsideGroup(this.cc)) && this.state === "SENT")
	            return 'INBOX';
	        if (conversation_1.Conversation.instance.currentFolder.getName() !== 'INBOX' && this.isUserAuthor() && this.state === "SENT")
	            return 'OUTBOX';
	        if (this.from === entcore_1.model.me.userId && this.state === "DRAFT")
	            return 'DRAFT';
	        return '';
	    };
	    Mail.prototype.matchSystemIcon = function () {
	        var systemFolder = this.getSystemFolder();
	        if (systemFolder === "INBOX")
	            return this.getInSystemIcon();
	        if (systemFolder === "OUTBOX")
	            return this.getOutSystemIcon();
	        if (systemFolder === "DRAFT")
	            return 'draft';
	        return '';
	    };
	    Mail.prototype.getInSystemIcon = function () {
	        return 'mail-in';
	    };
	    Mail.prototype.getOutSystemIcon = function () {
	        return 'mail-out';
	    };
	    Mail.prototype.isAvatarGroup = function (systemFolder) {
	        if (systemFolder === "INBOX")
	            return false;
	        return this.to.length > 1 || this.isRecipientGroup();
	    };
	    Mail.prototype.isAvatarUnknown = function (systemFolder) {
	        if (systemFolder === "INBOX" && !this.from)
	            return true;
	        if (systemFolder === "OUTBOX" && this.to.length === 1 && !this.to[0])
	            return true;
	        return this.to.length === 0;
	    };
	    Mail.prototype.isAvatarAlone = function () {
	        var systemFolder = this.getSystemFolder();
	        if (systemFolder === "INBOX")
	            return true;
	        return this.to.length === 1 && !this.isRecipientGroup();
	    };
	    Mail.prototype.matchAvatar = function () {
	        var systemFolder = this.getSystemFolder();
	        if (this.isAvatarGroup(systemFolder))
	            return '/img/illustrations/group-avatar.svg?thumbnail=100x100';
	        if (this.isAvatarUnknown(systemFolder))
	            return '/img/illustrations/unknown-avatar.svg?thumbnail=100x100';
	        if (this.isAvatarAlone()) {
	            var id = systemFolder === "INBOX" ? this.from : this.to[0];
	            return '/userbook/avatar/' + id + '?thumbnail=100x100';
	        }
	        return '';
	    };
	    Mail.prototype.isUnread = function (currentFolder) {
	        var systemFolder = this.getSystemFolder();
	        return this.unread && (systemFolder === 'INBOX' || currentFolder.getName() === 'INBOX');
	    };
	    Mail.prototype.isRecipientGroup = function () {
	        var to = this.to[0];
	        if (!to)
	            return false;
	        if (!(to instanceof user_1.User)) {
	            to = this.map(to);
	        }
	        return to.isAGroup();
	    };
	    ;
	    Mail.prototype.isMeInsideGroup = function (list) {
	        if (!list)
	            return false;
	        if (list[0] instanceof user_1.User) {
	            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
	                var user = list_1[_i];
	                if (entcore_1.model.me.groupsIds.indexOf(user.id) !== -1 || user.id === entcore_1.model.me.userId)
	                    return true;
	            }
	        }
	        else {
	            if (list.indexOf(entcore_1.model.me.userId) !== -1)
	                return true;
	            for (var _a = 0, list_2 = list; _a < list_2.length; _a++) {
	                var id = list_2[_a];
	                if (entcore_1.model.me.groupsIds.indexOf(id) !== -1)
	                    return true;
	            }
	        }
	        return false;
	    };
	    Mail.prototype.setMailSignature = function (signature) {
	        if (!this.body)
	            this.body = '';
	        this.body = this.body + '<div><br></div><div class="signature new-signature">' + signature + '</div>';
	    };
	    Mail.prototype.setMailFirstSpace = function () {
	        this.body = '<div>​</div><div>​</div>';
	    };
	    Mail.prototype.setMailContent = function (origin, mailType, compile, sanitize, $scope, signature, copyReceivers) {
	        var _this = this;
	        var replyPrefix = entcore_1.idiom.translate(exports.format[mailType].prefix);
	        this.subject = (origin.subject.indexOf(replyPrefix) === -1 ? replyPrefix + " " : "") + origin.subject;
	        if (copyReceivers) {
	            this.cc = origin.cc;
	            this.to = origin.to;
	            this.cci = origin.cci;
	        }
	        return new Promise(function (resolve, reject) {
	            _this.body = '<div>​</div><div>​</div><div><br></div><div class="signature new-signature">' + signature + '</div>' +
	                exports.format[mailType].content + '<br><blockquote>' + origin.body + '</blockquote>';
	            var tempElement = compile(exports.format[mailType].content)($scope);
	            setTimeout(function () {
	                this.body = (0, entcore_1.$)(document.createElement('div')).append(tempElement)[0].outerHTML + '<br><blockquote>' + this.body + '</blockquote>';
	                tempElement.remove();
	                resolve();
	            }, 0);
	        });
	    };
	    Mail.prototype.addHideAndShow = function () {
	        if (this.body.search('<p class="medium-text') == -1) {
	            return this.body;
	        }
	        var history = this.body.slice(this.body.search('<p class="medium-text'));
	        var newBody = this.body
	            //.replace(/<p.*?p>/, '')
	            .replace(history, '') +
	            "<div class=\"row drop-down-block\" ng-class=\"{slided: isSlided}\">\n            <div class=\"drop-down-label\" ng-click=\"showConversationHistory()\">\n                <i class=\"arrow\"></i>\n                <label><i18n>[[messageHistory]]</i18n></label>\n            </div>\n            <div class=\"drop-down-content\" slide=\"isSlided\">\n                " + history + "\n            </div>\n        </div>";
	        return newBody;
	    };
	    Mail.prototype.getSubject = function () {
	        return this.subject ? this.subject : entcore_1.idiom.translate('nosubject');
	    };
	    Mail.prototype.notifDate = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).calendar();
	    };
	    ;
	    Mail.prototype.longDate = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).format('dddd DD MMMM YYYY');
	    };
	    ;
	    Mail.prototype.isToday = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).isSame((0, entcore_1.moment)().startOf('day'), 'day');
	    };
	    Mail.prototype.isYesterday = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).isSame((0, entcore_1.moment)().subtract(1, 'day'), 'day');
	    };
	    Mail.prototype.isMoreThanYesterday = function () {
	        return !this.isToday() && !this.isYesterday();
	    };
	    Mail.prototype.getHours = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).format('HH');
	    };
	    Mail.prototype.getMinutes = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).format('mm');
	    };
	    Mail.prototype.getDate = function () {
	        return (0, entcore_1.moment)(parseInt(this.date)).format('dddd D MMMM YYYY');
	    };
	    Mail.prototype.sender = function () {
	        var that = this;
	        return user_1.User.prototype.mapUser(this.displayNames, this.from);
	    };
	    ;
	    Mail.prototype.map = function (id) {
	        if (id instanceof user_1.User || id.deleted) {
	            return id;
	        }
	        return user_1.User.prototype.mapUser(this.displayNames, id);
	    };
	    ;
	    Mail.prototype.updateAllowReply = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                this.allowReply = true; // TODO
	                this.allowReplyAll = true; // TODO
	                return [2 /*return*/];
	            });
	        });
	    };
	    ;
	    Mail.prototype.saveAsDraft = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var that, data, path, response, response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        that = this;
	                        data = { subject: this.subject, body: this.body };
	                        data.to = entcore_1._.pluck(this.to, 'id');
	                        data.cc = entcore_1._.pluck(this.cc, 'id');
	                        data.cci = entcore_1._.pluck(this.cci, 'id');
	                        path = '/conversation/draft';
	                        if (!this.id) return [3 /*break*/, 2];
	                        return [4 /*yield*/, axios_1.default.put(path + '/' + this.id, data)];
	                    case 1:
	                        response = _a.sent();
	                        entcore_toolkit_1.Mix.extend(this, response.data);
	                        return [3 /*break*/, 4];
	                    case 2:
	                        if (this.parentConversation) {
	                            path += '?In-Reply-To=' + this.parentConversation.id;
	                        }
	                        return [4 /*yield*/, axios_1.default.post(path, data)];
	                    case 3:
	                        response = _a.sent();
	                        entcore_toolkit_1.Mix.extend(this, response.data);
	                        _a.label = 4;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ;
	    Mail.prototype.send = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var data, path, response, result, e_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        data = { subject: this.subject, body: this.body };
	                        data.to = entcore_1._.pluck(this.to, 'id');
	                        data.cc = entcore_1._.pluck(this.cc, 'id');
	                        data.cci = entcore_1._.pluck(this.cci, 'id');
	                        if (data.to.indexOf(entcore_1.model.me.userId) !== -1) {
	                            folder_1.Folder.purgeCache();
	                            conversation_1.Conversation.instance.folders['inbox'].nbUnread++;
	                        }
	                        if (data.cc.indexOf(entcore_1.model.me.userId) !== -1) {
	                            folder_1.Folder.purgeCache();
	                            conversation_1.Conversation.instance.folders['inbox'].nbUnread++;
	                        }
	                        path = '/conversation/send?';
	                        if (!data.subject) {
	                            data.subject = entcore_1.idiom.translate('nosubject');
	                        }
	                        if (this.id) {
	                            path += 'id=' + this.id + '&';
	                        }
	                        if (this.parentConversation) {
	                            path += 'In-Reply-To=' + this.parentConversation.id;
	                        }
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.post(path, data)];
	                    case 2:
	                        response = _a.sent();
	                        result = response.data;
	                        // Conversation.instance.folders['outbox'].mails.refresh();
	                        // Conversation.instance.folders['draft'].mails.refresh();
	                        if (parseInt(result.sent) > 0) {
	                            this.state = "SENT";
	                            entcore_1.notify.info('mail.sent');
	                        }
	                        return [2 /*return*/, { inactive: result.inactive, undelivered: result.undelivered }];
	                    case 3:
	                        e_1 = _a.sent();
	                        if (e_1.response.status === 401) {
	                            entcore_1.notify.error("conversation.error.send.visible");
	                        }
	                        else {
	                            entcore_1.notify.error(e_1.response.data.error);
	                        }
	                        return [2 /*return*/, {}];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ;
	    Mail.prototype.open = function (forPrint) {
	        return __awaiter(this, void 0, void 0, function () {
	            var unread, response, toUsers;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        unread = this.unread;
	                        if (this.unread && this.state !== "DRAFT") {
	                            conversation_1.Conversation.instance.currentFolder.nbUnread--;
	                        }
	                        this.unread = false;
	                        return [4 /*yield*/, axios_1.default.get('/conversation/message/' + this.id)];
	                    case 1:
	                        response = _a.sent();
	                        entcore_toolkit_1.Mix.extend(this, response.data);
	                        if (response.data.parent_id) {
	                            this.bodyShown = this.addHideAndShow();
	                        }
	                        else {
	                            this.bodyShown = this.body;
	                        }
	                        toUsers = function (ids) {
	                            if (!ids)
	                                return [];
	                            return ids.map(function (id) {
	                                var displayName = _this.displayNames.find(function (name) { return name[0] === id; });
	                                return displayName ? new user_1.User(id, displayName[1], null, JSON.parse(displayName[2])) : null;
	                            }).filter(function (u) { return u != null; });
	                        };
	                        this.to = toUsers(this.to);
	                        this.cc = toUsers(this.cc);
	                        this.cci = toUsers(this.cci);
	                        if (!!forPrint) return [3 /*break*/, 4];
	                        return [4 /*yield*/, conversation_1.Conversation.instance.folders['inbox'].countUnread(unread)];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, this.updateAllowReply()];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ;
	    Mail.prototype.remove = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.id)
	                            return [2 /*return*/];
	                        if (!(conversation_1.Conversation.instance.currentFolder.folderName !== 'trash')) return [3 /*break*/, 2];
	                        return [4 /*yield*/, axios_1.default.put('/conversation/trash', { id: [this.id] })];
	                    case 1:
	                        _a.sent();
	                        conversation_1.Conversation.instance.currentFolder.mails.refresh();
	                        conversation_1.Conversation.instance.folders['trash'].mails.refresh();
	                        return [3 /*break*/, 4];
	                    case 2: return [4 /*yield*/, axios_1.default.put('/conversation/delete', { id: [this.id] })];
	                    case 3:
	                        _a.sent();
	                        conversation_1.Conversation.instance.folders['trash'].mails.refresh();
	                        _a.label = 4;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ;
	    Mail.prototype.removeFromFolder = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, axios_1.default.put('move/root?id=' + this.id)];
	            });
	        });
	    };
	    Mail.prototype.restore = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('/conversation/restore', { id: [this.id] })];
	                    case 1:
	                        _a.sent();
	                        conversation_1.Conversation.instance.folders['trash'].mails.refresh();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.move = function (destinationFolder) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('move/userfolder/' + destinationFolder.id, { id: [this.id] })];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, conversation_1.Conversation.instance.currentFolder.mails.refresh()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, conversation_1.Conversation.instance.folders.draft.mails.refresh()];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.trash = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('/conversation/trash', { id: [this.id] })];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, conversation_1.Conversation.instance.currentFolder.mails.refresh()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, conversation_1.Conversation.instance.folders.draft.mails.refresh()];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.postAttachments = function ($scope) {
	        var _this = this;
	        var promises = [];
	        var _loop_1 = function (i) {
	            var targetAttachment = this_1.newAttachments[i];
	            var attachmentObj = new Attachment(targetAttachment);
	            this_1.loadingAttachments.push(attachmentObj);
	            var formData = new FormData();
	            formData.append('file', attachmentObj.file);
	            var promise = axios_1.default.post("message/" + this_1.id + "/attachment", formData, {
	                onUploadProgress: function (e) {
	                    if (e.lengthComputable) {
	                        var percentage = Math.round((e.loaded * 100) / e.total);
	                        attachmentObj.progress.completion = percentage;
	                        $scope.$apply();
	                    }
	                }
	            })
	                .then(function (response) {
	                _this.loadingAttachments.splice(_this.loadingAttachments.indexOf(attachmentObj), 1);
	                attachmentObj.id = response.data.id;
	                attachmentObj.filename = attachmentObj.file.name;
	                attachmentObj.size = attachmentObj.file.size;
	                attachmentObj.contentType = attachmentObj.file.type;
	                _this.attachments.push(attachmentObj);
	                quota_1.quota.refresh();
	                $scope.$apply();
	            })
	                .catch(function (e) {
	                _this.loadingAttachments.splice(_this.loadingAttachments.indexOf(attachmentObj), 1);
	                entcore_1.notify.error(e.response.data.error);
	            });
	            promises.push(promise);
	        };
	        var this_1 = this;
	        for (var i = 0; i < this.newAttachments.length; i++) {
	            _loop_1(i);
	        }
	        return Promise.all(promises);
	    };
	    Mail.prototype.deleteAttachment = function (attachment) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.attachments.splice(this.attachments.indexOf(attachment), 1);
	                        return [4 /*yield*/, axios_1.default.delete("message/" + this.id + "/attachment/" + attachment.id)];
	                    case 1:
	                        _a.sent();
	                        quota_1.quota.refresh();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.addFavorite = function (id) {
	        return __awaiter(this, void 0, void 0, function () {
	            var shareBookmarkRes, shareBookmarkIds, visiblesRes, visibleIds;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.to) {
	                            this.to = [];
	                        }
	                        if (!this.excluded) {
	                            this.excluded = [];
	                        }
	                        return [4 /*yield*/, axios_1.default.get('/directory/sharebookmark/' + id)];
	                    case 1:
	                        shareBookmarkRes = (_a.sent()).data;
	                        shareBookmarkIds = __spreadArray(__spreadArray([], shareBookmarkRes.groups.map(function (g) { return g.id; }), true), shareBookmarkRes.users.map(function (u) { return u.id; }), true);
	                        return [4 /*yield*/, axios_1.default.post("/conversation/visibles", { ids: shareBookmarkIds })];
	                    case 2:
	                        visiblesRes = _a.sent();
	                        visibleIds = visiblesRes.data.map(function (x) { return x['visibles.id']; });
	                        shareBookmarkRes.groups.forEach(function (group) {
	                            var newGroup = new user_1.User(group.id, group.name, null, true);
	                            if (visibleIds.includes(group.id)) {
	                                _this.to.push(newGroup);
	                            }
	                            else {
	                                _this.excluded.push(newGroup);
	                            }
	                        });
	                        shareBookmarkRes.users.forEach(function (user) {
	                            var newUser = new user_1.User(user.id, user.displayName, user.profile, false);
	                            if (visibleIds.includes(user.id)) {
	                                _this.to.push(newUser);
	                            }
	                            else {
	                                _this.excluded.push(newUser);
	                            }
	                        });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.trackEvent = function (eventType) {
	        return __awaiter(this, void 0, void 0, function () {
	            var eventJson, e_2;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(eventType != null)) return [3 /*break*/, 4];
	                        eventJson = __assign({}, eventType);
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.post("/conversation/store/event", eventJson)];
	                    case 2:
	                        _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        e_2 = _a.sent();
	                        console.error("[TrackingInternal] failed to trackEvent: ", e_2);
	                        return [3 /*break*/, 4];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.controlContent = function (content) {
	        return __awaiter(this, void 0, void 0, function () {
	            var response, e_3;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(content != null)) return [3 /*break*/, 4];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.post("conversation/checkContent", content)];
	                    case 2:
	                        response = _a.sent();
	                        return [2 /*return*/, response];
	                    case 3:
	                        e_3 = _a.sent();
	                        console.error("Failed to check content: ", e_3);
	                        return [2 /*return*/, null];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.keywords = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var response, e_4;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, axios_1.default.get("conversation/keywords")];
	                    case 1:
	                        response = _a.sent();
	                        return [2 /*return*/, response.data.keywords];
	                    case 2:
	                        e_4 = _a.sent();
	                        console.error("Failed to check content: ", e_4);
	                        return [2 /*return*/, null];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.importDocumentInWorkspace = function (file, name) {
	        return __awaiter(this, void 0, void 0, function () {
	            var formData, thumbnails, response, error_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        formData = new FormData();
	                        formData.append('blob', file, name);
	                        thumbnails = "thumbnail=120x120&thumbnail=150x150&thumbnail=100x100&thumbnail=290x290&thumbnail=48x48&thumbnail=82x82&thumbnail=381x381";
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.post('/workspace/document?protected=true&application=media-library&' + thumbnails, formData, {
	                                withCredentials: false,
	                                headers: {
	                                    'Content-Type': 'multipart/form-data'
	                                },
	                                responseType: 'json'
	                            })];
	                    case 2:
	                        response = _a.sent();
	                        return [2 /*return*/, response.data._id];
	                    case 3:
	                        error_1 = _a.sent();
	                        console.error("Failed to import image:", error_1);
	                        throw new Error("exercizer.error");
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mail.prototype.getConfPublic = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.get('/conversation/conf/public')];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    return Mail;
	}());
	exports.Mail = Mail;
	var Mails = /** @class */ (function () {
	    function Mails(api) {
	        if (api instanceof folder_1.UserFolder) {
	            this.userFolder = api;
	        }
	        else {
	            this.api = api;
	        }
	        this.loading = false;
	        this.selection = new entcore_toolkit_1.Selection([]);
	    }
	    Mails.prototype.push = function (item) {
	        this.all.push(item);
	    };
	    Object.defineProperty(Mails.prototype, "all", {
	        get: function () {
	            return this.selection.all;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Mails.prototype.removeFromFolder = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('move/root?' + (0, entcore_1.toFormData)({ id: entcore_1._.pluck(this.selection.selected, 'id') }))];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mails.prototype.addRange = function (arr, selectAll) {
	        var _this = this;
	        if (!(arr[0] instanceof Mail)) {
	            arr.forEach(function (d) {
	                var m = entcore_toolkit_1.Mix.castAs(Mail, d);
	                if (selectAll)
	                    m.selected = true;
	                _this.all.push(m);
	            });
	        }
	        else {
	            arr.forEach(function (m) {
	                if (selectAll)
	                    m.selected = true;
	                _this.all.push(m);
	            });
	        }
	    };
	    Mails.prototype.sync = function (data) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.loading = !data || !data.pageNumber || data.pageNumber == 0 || data.searchText != undefined && data.pageNumber == 0;
	                        this.pageLoading = true;
	                        if (!this.userFolder) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.userFolderSync(data)];
	                    case 1:
	                        _a.sent();
	                        return [3 /*break*/, 4];
	                    case 2: return [4 /*yield*/, this.apiSync(data)];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        this.loading = false;
	                        this.pageLoading = false;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mails.prototype.userFolderSync = function (data) {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!data) {
	                            data = {};
	                        }
	                        if (!data.pageNumber) {
	                            data.pageNumber = 0;
	                        }
	                        if (!data.searchText) {
	                            data.searchText = "";
	                        }
	                        else {
	                            data.searchText += "&search=" + data.searchText;
	                        }
	                        if (!data.filterUnread) {
	                            data.filterUnread = false;
	                        }
	                        if (!data.selectAll) {
	                            data.selectAll = false;
	                        }
	                        return [4 /*yield*/, axios_1.default.get('/conversation/list/' + this.userFolder.id + '?restrain=&page=' + data.pageNumber + "&unread=" + data.filterUnread + data.searchText)];
	                    case 1:
	                        response = _a.sent();
	                        if (data.emptyList !== false) {
	                            this.all.splice(0, this.all.length);
	                        }
	                        response.data.forEach(function (m) {
	                            if (data.selectAll)
	                                m.selected = true;
	                            _this.all.push(entcore_toolkit_1.Mix.castAs(Mail, m));
	                        });
	                        if (response.data.length === 0) {
	                            this.full = true;
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mails.prototype.apiSync = function (data) {
	        return __awaiter(this, void 0, void 0, function () {
	            var response;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!data) {
	                            data = {};
	                        }
	                        if (!data.pageNumber) {
	                            data.pageNumber = 0;
	                        }
	                        if (!data.searchText) {
	                            data.searchText = "";
	                        }
	                        else {
	                            data.searchText = "&search=" + data.searchText;
	                        }
	                        if (!data.filterUnread) {
	                            data.filterUnread = false;
	                        }
	                        if (!data.selectAll) {
	                            data.selectAll = false;
	                        }
	                        return [4 /*yield*/, axios_1.default.get(this.api.get + '?page=' + data.pageNumber + "&unread=" + data.filterUnread + data.searchText)];
	                    case 1:
	                        response = _a.sent();
	                        if (data.emptyList !== false) {
	                            this.all.splice(0, this.all.length);
	                        }
	                        this.addRange(response.data, data.selectAll);
	                        if (response.data.length === 0) {
	                            this.full = true;
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mails.prototype.refresh = function () {
	        this.pageNumber = 0;
	        this.full = false;
	        return this.sync();
	    };
	    Mails.prototype.toTrash = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('/conversation/trash', { id: entcore_1._.pluck(this.selection.selected, 'id') })];
	                    case 1:
	                        _a.sent();
	                        conversation_1.Conversation.instance.folders.trash.mails.refresh();
	                        return [4 /*yield*/, quota_1.quota.refresh()];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mails.prototype.removeSelection = function () {
	        this.selection.removeSelection();
	    };
	    Mails.prototype.refreshSegment = function (data) {
	        return __awaiter(this, void 0, void 0, function () {
	            var head;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        head = this.all.findIndex(function (mail) { return mail.selected; });
	                        data.pageNumber = Math.floor(head / 25);
	                        this.full = false;
	                        this.all.splice(25 * data.pageNumber, this.all.length);
	                        this.selection.removeSelection();
	                        return [4 /*yield*/, this.sync(data)];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, data.pageNumber];
	                }
	            });
	        });
	    };
	    Mails.prototype.moveSelection = function (destinationFolder) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, axios_1.default.put('move/userfolder/' + destinationFolder.id, { id: entcore_1._.pluck(this.selection.selected, 'id') })];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Mails.prototype.toggleUnread = function (unread) {
	        return __awaiter(this, void 0, void 0, function () {
	            var selected, folder, e_5;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        selected = [];
	                        folder = '';
	                        this.selection.selected.forEach(function (mail) {
	                            folder = mail.getSystemFolder();
	                            if (folder === 'INBOX' || folder === 'OUTBOX') {
	                                selected.push(mail);
	                            }
	                        });
	                        if (selected.length === 0)
	                            return [2 /*return*/];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, axios_1.default.post('/conversation/toggleUnread', { id: entcore_1._.pluck(this.selection.selected, 'id'), unread: unread })];
	                    case 2:
	                        _a.sent();
	                        quota_1.quota.refresh();
	                        selected.forEach(function (mail) { return mail.unread = unread; });
	                        return [3 /*break*/, 4];
	                    case 3:
	                        e_5 = _a.sent();
	                        entcore_1.notify.error(e_5.response.data.error);
	                        return [3 /*break*/, 4];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Mails;
	}());
	exports.Mails = Mails;
	var mailFormat = {
	    reply: {
	        prefix: 'reply.re',
	        content: ''
	    },
	    transfer: {
	        prefix: 'reply.fw',
	        content: ''
	    }
	};
	axios_1.default.get('/conversation/public/template/mail-content/transfer.html').then(function (response) {
	    exports.format.transfer.content = response.data;
	});
	axios_1.default.get('/conversation/public/template/mail-content/reply.html').then(function (response) {
	    exports.format.reply.content = response.data;
	});
	exports.format = mailFormat;


/***/ }),
/* 49 */
/***/ (function(module, exports) {

	module.exports = angular;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.printController = void 0;
	var entcore_1 = __webpack_require__(1);
	var model_1 = __webpack_require__(3);
	exports.printController = entcore_1.ng.controller('PrintController', [
	    '$scope', 'route', 'model',
	    function ($scope, route, model) {
	        route({
	            viewPrint: function (params) {
	                return __awaiter(this, void 0, void 0, function () {
	                    var e_1;
	                    return __generator(this, function (_a) {
	                        switch (_a.label) {
	                            case 0:
	                                $scope.mail = new model_1.Mail(params.mailId);
	                                _a.label = 1;
	                            case 1:
	                                _a.trys.push([1, 3, , 4]);
	                                return [4 /*yield*/, $scope.mail.open(true)];
	                            case 2:
	                                _a.sent();
	                                $scope.$apply();
	                                setTimeout(function () {
	                                    window.print();
	                                }, 1000);
	                                return [3 /*break*/, 4];
	                            case 3:
	                                e_1 = _a.sent();
	                                console.log(e_1);
	                                entcore_1.template.open('page', 'errors/e404');
	                                return [3 /*break*/, 4];
	                            case 4: return [2 /*return*/];
	                        }
	                    });
	                });
	            }
	        });
	    }
	]);


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.recipientList = void 0;
	var entcore_1 = __webpack_require__(1);
	var axios_1 = __webpack_require__(15);
	/**
	 * @description Displays chips of items list with a search input and dropDown options. If more than
	 * 4 items are in the list, only 2 of them will be shown.
	 * @param ngModel The list of items to display in chips.
	 * @param ngChange Called when the items list changed.
	 * @param updateFoundItems (search, model, founds) Called to update the dropDown content according to
	 * the search input.
	 * @example
	 * <recipient-list
	        ng-model="<model>"
	        ng-change="<function>()"
	        update-found-items="<function>(search, model, founds)">
	    </recipient-list>
	 */
	exports.recipientList = entcore_1.ng.directive('recipientList', ['CounterService', function (svcCounter) {
	        return {
	            restrict: 'E',
	            template: "\n            <div class=\"twelve flex-row align-center\" ng-click=\"unfoldChip()\">\n                <contact-chip class=\"block relative removable\" \n                    ng-model=\"item\"\n                    action=\"deleteItem(item)\"\n                    ng-repeat=\"item in ngModel |\u00A0limitTo : (needChipDisplay() ? 2 : ngModel.length)\">\n                </contact-chip>\n                <label class=\"chip selected\" ng-if=\"needChipDisplay()\" ng-click=\"giveFocus()\">\n                    <span class=\"cell\">... <i18n>chip.more1</i18n> [[ngModel.length - 2]] <i18n>chip.more2</i18n></span>\n                </label>\n                <img skin-src=\"/img/illustrations/loading.gif\" width=\"30px\" heigh=\"30px\" ng-if=\"loading\"/>\n                <form class=\"input-help\" ng-submit=\"update(true)\">\n\t\t\t\t\t\t\t\t\t\t<input class=\"chip-input right-magnet\" type=\"text\" ng-model=\"search.text\" ng-change=\"update()\" autocomplete=\"off\" ng-class=\"{ move: search.text.length > 0 }\" \n\t\t\t\t\t\t\t\t\t\taria-autocomplete=\"list\" aria-expanded=\"[[isDropDownVisible()]]\" aria-controls=\"[[idOfDataDropDown]]\" aria-haspopup=\"listbox\"\n                    i18n-placeholder=\"[[restriction ? 'share.search.help' : 'share.search.placeholder' ]]\"\n                    />    \n                </form>\n                <drop-down\n\t\t\t\t\t\t\t\t\t\tlist-id=\"[[idOfDataDropDown]]\"\n                    options=\"itemsFound\"\n                    ng-change=\"addItem()\"\n                    on-close=\"clearSearch()\"\n                    ng-model=\"currentReceiver\">\n                </drop-down>\n            </div>\n\n            <excluded-list excluded=\"sharebookmark.excluded\"></excluded-list>\n        ",
	            scope: {
	                ngModel: '=',
	                ngChange: '&',
	                restriction: '=',
	                updateFoundItems: '&'
	            },
	            link: function (scope, element, attributes) {
	                var firstFocus = true;
	                var minWidth = 0;
	                scope.focused = false;
	                scope.loading = false;
	                scope.search = {
	                    text: ''
	                };
	                scope.itemsFound = [];
	                scope.currentReceiver = 'undefined';
	                scope.addedFavorites = [];
	                scope.sharebookmark = {
	                    excluded: []
	                };
	                scope.idOfDataDropDown = "dd-id-for-aria-" + svcCounter.increase();
	                var statusId = "status-id-for-aria-" + svcCounter.increase();
	                var indexOfFocusedOption = -1;
	                // True if DropDown is considered visible
	                scope.isDropDownVisible = function () {
	                    return entcore_1.angular.isArray(scope.itemsFound) && scope.itemsFound.length > 0;
	                };
	                element.find('input').on('focus', function () {
	                    if (firstFocus)
	                        firstFocus = false;
	                    scope.focused = true;
	                    element.find('div').addClass('focus');
	                    element.find('form').width(minWidth);
	                });
	                element.find('input').on('blur', function () {
	                    scope.focused = false;
	                    element.find('div').removeClass('focus');
	                    setTimeout(function () {
	                        if (!scope.focused) {
	                            element.find('form').width(0);
	                            scope.itemsFound = [];
	                            scope.$apply('itemsFound');
	                        }
	                    }, 250);
	                });
	                // Begin: ARIA support : Let the dropdown be accessible, without loosing focus (using up and down arrow)
	                scope.ariaReader = entcore_1.angular.element('<span id="' + statusId + '" role="status" aria-live="polite" style="width:0; height:0; opacity:0; border:0; margin:0; padding:0;"></span>');
	                element.append(scope.ariaReader);
	                element.find('input').attr('aria-controls', statusId).attr('aria-label', entcore_1.idiom.translate('recipient'));
	                var ariaLive = function () {
	                    if (indexOfFocusedOption < 0) {
	                        indexOfFocusedOption = -1;
	                        scope.ariaReader.text("");
	                    }
	                    else if (indexOfFocusedOption >= scope.itemsFound.length) {
	                        indexOfFocusedOption = scope.itemsFound.length - 1;
	                    }
	                    if (indexOfFocusedOption >= 0) {
	                        scope.currentReceiver = scope.itemsFound[indexOfFocusedOption];
	                        scope.ariaReader.text(scope.currentReceiver.toString());
	                    }
	                    scope.$apply('indexOfFocusedOption');
	                };
	                // End: ARIA support						
	                element.find('input').on('keydown', function (e) {
	                    if (e.keyCode === 8 && typeof scope.search.text === "string" && scope.search.text.length === 0) { // BackSpace
	                        var nb = scope.ngModel.length;
	                        if (nb > 0)
	                            scope.deleteItem(scope.ngModel[nb - 1]);
	                    }
	                    // Begin: ARIA support : navigating by keyboard and allowing screen-readers
	                    else if (e.keyCode === 40 && scope.isDropDownVisible()) { // Down arrow)
	                        // Move pseudo-focus farther in DropDown list
	                        indexOfFocusedOption = Math.min(++indexOfFocusedOption, scope.itemsFound.length - 1);
	                        ariaLive();
	                        e.preventDefault();
	                    }
	                    else if (e.keyCode === 38 && scope.isDropDownVisible()) { // Up arrow)
	                        // Move pseudo-focus closer in DropDown list
	                        indexOfFocusedOption = Math.max(--indexOfFocusedOption, -1);
	                        ariaLive();
	                        e.preventDefault();
	                    }
	                    else if (e.keyCode === 13 && scope.isDropDownVisible()) { // Enter)
	                        if (0 <= indexOfFocusedOption && indexOfFocusedOption < scope.itemsFound.length) {
	                            scope.addItem();
	                            var tmp = scope.focused;
	                            scope.focused = false;
	                            scope.clearSearch();
	                            scope.focused = tmp;
	                        }
	                    }
	                    else {
	                        indexOfFocusedOption = -1;
	                    }
	                    // End: ARIA support
	                });
	                //prevent blur when look for more users in dropDown
	                element.parents().find('.display-more').on('click', function () {
	                    if (!firstFocus) {
	                        scope.giveFocus();
	                    }
	                });
	                scope.needChipDisplay = function () {
	                    return !scope.focused && (typeof scope.ngModel !== 'undefined') && scope.ngModel.length > 3;
	                };
	                scope.update = function (force) { return __awaiter(void 0, void 0, void 0, function () {
	                    return __generator(this, function (_a) {
	                        switch (_a.label) {
	                            case 0:
	                                scope.addedFavorites = [];
	                                if (!force) return [3 /*break*/, 2];
	                                return [4 /*yield*/, scope.doSearch()];
	                            case 1:
	                                _a.sent();
	                                return [3 /*break*/, 5];
	                            case 2:
	                                if (!(scope.restriction && scope.search.text.length < 3 || scope.search.text.length < 1)) return [3 /*break*/, 3];
	                                scope.itemsFound.splice(0, scope.itemsFound.length);
	                                return [3 /*break*/, 5];
	                            case 3: return [4 /*yield*/, scope.doSearch()];
	                            case 4:
	                                _a.sent();
	                                _a.label = 5;
	                            case 5: return [2 /*return*/];
	                        }
	                    });
	                }); };
	                scope.giveFocus = function () {
	                    if (!scope.focus)
	                        element.find('input').focus();
	                };
	                scope.unfoldChip = function () {
	                    if (!firstFocus && scope.needChipDisplay()) {
	                        scope.giveFocus();
	                    }
	                };
	                scope.addOneItem = function (item) {
	                    for (var i = 0, l = scope.ngModel.length; i < l; i++) {
	                        if (scope.ngModel[i].id === item.id) {
	                            return false;
	                        }
	                    }
	                    scope.ngModel.push(item);
	                    return true;
	                };
	                scope.addItem = function () { return __awaiter(void 0, void 0, void 0, function () {
	                    var response, ids_1, visiblesRes, visibleIds_1;
	                    return __generator(this, function (_a) {
	                        switch (_a.label) {
	                            case 0:
	                                scope.focused = true;
	                                element.find('input').focus();
	                                if (!scope.ngModel) {
	                                    scope.ngModel = [];
	                                }
	                                if (!(scope.currentReceiver.type === 'sharebookmark')) return [3 /*break*/, 3];
	                                scope.loading = true;
	                                return [4 /*yield*/, axios_1.default.get('/directory/sharebookmark/' + scope.currentReceiver.id)];
	                            case 1:
	                                response = _a.sent();
	                                ids_1 = [];
	                                response.data.groups.forEach(function (group) { return ids_1.push(group.id); });
	                                response.data.users.forEach(function (user) { return ids_1.push(user.id); });
	                                return [4 /*yield*/, axios_1.default.post("/conversation/visibles", { ids: ids_1 })];
	                            case 2:
	                                visiblesRes = _a.sent();
	                                visibleIds_1 = visiblesRes.data.map(function (x) { return x['visibles.id']; });
	                                response.data.groups.forEach(function (group) {
	                                    group.isGroup = true;
	                                    if (visibleIds_1.includes(group.id)) {
	                                        scope.addOneItem(group);
	                                    }
	                                });
	                                response.data.users.forEach(function (user) {
	                                    user.isGroup = false;
	                                    if (visibleIds_1.includes(user.id)) {
	                                        scope.addOneItem(user);
	                                    }
	                                });
	                                if (visibleIds_1.length < ids_1.length) {
	                                    scope.search.text = '';
	                                    scope.itemsFound = [];
	                                    response.data.groups.forEach(function (g) {
	                                        g.isGroup = true;
	                                        if (!visibleIds_1.includes(g.id)) {
	                                            scope.sharebookmark.excluded.push(g);
	                                        }
	                                    });
	                                    response.data.users.forEach(function (u) {
	                                        u.isGroup = false;
	                                        if (!visibleIds_1.includes(u.id)) {
	                                            scope.sharebookmark.excluded.push(u);
	                                        }
	                                    });
	                                }
	                                scope.addedFavorites.push(scope.currentReceiver);
	                                scope.loading = false;
	                                return [3 /*break*/, 4];
	                            case 3:
	                                scope.ngModel.push(scope.currentReceiver);
	                                setTimeout(function () {
	                                    scope.itemsFound.splice(scope.itemsFound.indexOf(scope.currentReceiver), 1);
	                                    scope.$apply('itemsFound');
	                                }, 0);
	                                _a.label = 4;
	                            case 4:
	                                scope.$apply('ngModel');
	                                scope.$eval(scope.ngChange);
	                                return [2 /*return*/];
	                        }
	                    });
	                }); };
	                scope.deleteItem = function (item) { return __awaiter(void 0, void 0, void 0, function () {
	                    return __generator(this, function (_a) {
	                        scope.ngModel = entcore_1._.reject(scope.ngModel, function (i) { return i === item; });
	                        scope.$apply('ngModel');
	                        scope.$eval(scope.ngChange);
	                        if (scope.itemsFound.length > 0) {
	                            setTimeout(function () {
	                                return __awaiter(this, void 0, void 0, function () {
	                                    return __generator(this, function (_a) {
	                                        switch (_a.label) {
	                                            case 0: return [4 /*yield*/, scope.doSearch()];
	                                            case 1:
	                                                _a.sent();
	                                                return [2 /*return*/];
	                                        }
	                                    });
	                                });
	                            }, 0);
	                        }
	                        return [2 /*return*/];
	                    });
	                }); };
	                scope.clearSearch = function () {
	                    indexOfFocusedOption = -1;
	                    if (!scope.focused) {
	                        scope.search.text = '';
	                        scope.itemsFound = [];
	                    }
	                };
	                scope.doSearch = function () { return __awaiter(void 0, void 0, void 0, function () {
	                    var i, element;
	                    return __generator(this, function (_a) {
	                        switch (_a.label) {
	                            case 0: return [4 /*yield*/, scope.updateFoundItems({ search: scope.search, model: scope.ngModel, founds: scope.itemsFound, restriction: scope.restriction })];
	                            case 1:
	                                _a.sent();
	                                for (i = scope.itemsFound.length - 1; i >= 0; i--) {
	                                    element = entcore_1._.findWhere(scope.addedFavorites, { id: scope.itemsFound[i].id });
	                                    if (element) {
	                                        scope.itemsFound.splice(scope.itemsFound.indexOf(element), 1);
	                                    }
	                                }
	                                scope.$apply('itemsFound');
	                                return [2 /*return*/];
	                        }
	                    });
	                }); };
	                // Focus when items list changes
	                scope.$watchCollection('ngModel', function (newValue) {
	                    if (!firstFocus) {
	                        scope.giveFocus();
	                    }
	                });
	                // Make the input width be the label help infos width
	                setTimeout(function () {
	                    minWidth = element.find('form label').width();
	                }, 0);
	            }
	        };
	    }]);


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.switchSearch = void 0;
	var entcore_1 = __webpack_require__(1);
	exports.switchSearch = entcore_1.ng.directive('switchSearch', function () {
	    return {
	        restrict: 'E',
	        transclude: true,
	        template: "\n            <div ng-class=\"{'hide-search': hide}\" class=\"flex-row align-center justify-between search-pagination\">\n                <a class=\"zero mobile-fat-mobile\" ng-click='cancelSearch()'><i class=\"close horizontal-spacing\"></i></a>\n                <div class=\"cell\">\n                    <input class=\"twelve mobile-fat-mobile\" type=\"text\" ng-model=\"ngModel\"\n                    ng-keyup=\"$event.keyCode == 13 ? ngChange({words: ngModel}) : null\"\n                    i18n-placeholder=\"search.condition\"/>\n                    <i class=\"search mobile-fat-mobile flex-row align-center justify-center\" ng-click=\"hide ? extend() : ngChange({words: ngModel});\"></i>\n                </div>\n                <ng-transclude></ng-transclude>\n            </div>\n        ",
	        scope: {
	            ngModel: '=',
	            ngChange: '&',
	            cancel: '&'
	        },
	        link: function (scope, element, attributes) {
	            scope.hide = true;
	            scope.extend = function () {
	                scope.hide = false;
	                // element.find('.cell').addClass("twelve-mobile");
	                // element.find('a').removeClass("zero-mobile");
	                element.find('a').removeClass("zero");
	                element.find('.cell').addClass("twelve");
	            };
	            scope.cancelSearch = function () {
	                scope.hide = true;
	                scope.ngModel = "";
	                element.find('.cell').removeClass("twelve");
	                element.find('a').addClass("zero");
	                //element.find('.cell').removeClass("twelve-mobile");
	                //element.find('a').addClass("zero-mobile");
	                scope.cancel();
	            };
	        }
	    };
	});


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.excludedList = void 0;
	var entcore_1 = __webpack_require__(1);
	exports.excludedList = entcore_1.ng.directive('excludedList', function () {
	    return {
	        restrict: 'E',
	        template: "\n            <lightbox show=\"excluded && excluded.length > 0\" on-close=\"handleClose()\">\n                <h2><i18n>warning.title</i18n></h2>\n                <span class=\"bottom-spacing-twice\">\n                    <i18n>warning.excluded</i18n>\n                </span>\n                <table class=\"twelve\">\n                    <thead>\n                    <tr>\n                        <th class=\"\" ng-click=\"\"><i18n>name</i18n></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr ng-repeat=\"e in excluded\">\n                        <td class=\"user\">[[e.displayName || e.name]]</td>\n                    </tr>\n                    </tbody>\n                </table>\n                <button type=\"button\" class=\"cancel right-magnet\" ng-click=\"handleClose()\"><i18n>warning.close</i18n></button>\n            </lightbox>\n        ",
	        scope: {
	            excluded: '='
	        },
	        link: function (scope) {
	            scope.handleClose = function () {
	                scope.excluded = [];
	                scope.$apply('excluded');
	            };
	        }
	    };
	});


/***/ })
/******/ ]);
//# sourceMappingURL=application.js.map